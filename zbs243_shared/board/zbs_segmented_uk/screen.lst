                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.2.0 #13081 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module screen
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _charDecode_numbers_65536_61
                                     12 	.globl _epdPrint
                                     13 	.globl _timerDelay
                                     14 	.globl _timerGet
                                     15 	.globl _spiByte
                                     16 	.globl _spiInit
                                     17 	.globl _spr
                                     18 	.globl ___memcpy
                                     19 	.globl _memset
                                     20 	.globl _memcmp
                                     21 	.globl _UART_TXE
                                     22 	.globl _UART_RXF
                                     23 	.globl _IEN_EA
                                     24 	.globl _IEN_RF2
                                     25 	.globl _IEN_RF1
                                     26 	.globl _IEN_TMR1
                                     27 	.globl _IEN_TMR0
                                     28 	.globl _IEN_UART0
                                     29 	.globl _P2_7
                                     30 	.globl _P2_6
                                     31 	.globl _P2_5
                                     32 	.globl _P2_4
                                     33 	.globl _P2_3
                                     34 	.globl _P2_2
                                     35 	.globl _P2_1
                                     36 	.globl _P2_0
                                     37 	.globl _P1_7
                                     38 	.globl _P1_6
                                     39 	.globl _P1_5
                                     40 	.globl _P1_4
                                     41 	.globl _P1_3
                                     42 	.globl _P1_2
                                     43 	.globl _P1_1
                                     44 	.globl _P1_0
                                     45 	.globl _P0_7
                                     46 	.globl _P0_6
                                     47 	.globl _P0_5
                                     48 	.globl _P0_4
                                     49 	.globl _P0_3
                                     50 	.globl _P0_2
                                     51 	.globl _P0_1
                                     52 	.globl _P0_0
                                     53 	.globl _CFGPAGE
                                     54 	.globl _TCON2
                                     55 	.globl _SETTINGS
                                     56 	.globl _TRIGGER
                                     57 	.globl _UNK_C1
                                     58 	.globl _RADIO_GOTLEN
                                     59 	.globl _RADIO_INITSEQ3
                                     60 	.globl _RADIO_RXLEN
                                     61 	.globl _RADIO_RXPTRH
                                     62 	.globl _RADIO_RXPTRL
                                     63 	.globl _RADIO_INITSEQ5
                                     64 	.globl _RADIO_INITSEQ4
                                     65 	.globl _RADIO_INITSEQ0
                                     66 	.globl _RADIO_TXLEN
                                     67 	.globl _RADIO_INITSEQ2
                                     68 	.globl _RADIO_INITSEQ1
                                     69 	.globl _RADIO_TXPTRH
                                     70 	.globl _RADIO_TXPTRL
                                     71 	.globl _TEMPCAL6
                                     72 	.globl _TEMPCAL5
                                     73 	.globl _TEMPCAL4
                                     74 	.globl _TEMPCAL3
                                     75 	.globl _TEMPRETL
                                     76 	.globl _TEMPRETH
                                     77 	.globl _TEMPCFG
                                     78 	.globl _TEMPCAL2
                                     79 	.globl _TEMPCAL1
                                     80 	.globl _FWRTHREE
                                     81 	.globl _FWRLENH
                                     82 	.globl _FWRLENL
                                     83 	.globl _FWRDSTH
                                     84 	.globl _FWRDSTL
                                     85 	.globl _FWRSRCH
                                     86 	.globl _FWRSRCL
                                     87 	.globl _FPGNO
                                     88 	.globl _T1
                                     89 	.globl _T0
                                     90 	.globl _TH1
                                     91 	.globl _TH0
                                     92 	.globl _TL1
                                     93 	.globl _TL0
                                     94 	.globl _TMOD
                                     95 	.globl _TCON
                                     96 	.globl _UARTBRGH
                                     97 	.globl _UARTBRGL
                                     98 	.globl _UARTBUF
                                     99 	.globl _UARTSTA
                                    100 	.globl _I2CUNKNOWN
                                    101 	.globl _I2CSPEED
                                    102 	.globl _I2CCTL
                                    103 	.globl _I2CBUF
                                    104 	.globl _I2CSTATE
                                    105 	.globl _SPIRX
                                    106 	.globl _SPITX
                                    107 	.globl _SPIENA
                                    108 	.globl _SPICFG
                                    109 	.globl _SPIUNKNOWN
                                    110 	.globl _WDTCONF
                                    111 	.globl _WDTRSTVALH
                                    112 	.globl _WDTRSTVALM
                                    113 	.globl _WDTRSTVALL
                                    114 	.globl _WDTPET
                                    115 	.globl _WDTENA
                                    116 	.globl _RESET
                                    117 	.globl _CLKEN
                                    118 	.globl _CLKSPEED
                                    119 	.globl _IEN1
                                    120 	.globl _IEN0
                                    121 	.globl _XPAGE
                                    122 	.globl _P2PULL
                                    123 	.globl _P1PULL
                                    124 	.globl _P0PULL
                                    125 	.globl _P2DIR
                                    126 	.globl _P1DIR
                                    127 	.globl _P0DIR
                                    128 	.globl _P2FUNC
                                    129 	.globl _P1FUNC
                                    130 	.globl _P0FUNC
                                    131 	.globl _P2CHSTA
                                    132 	.globl _P1CHSTA
                                    133 	.globl _P0CHSTA
                                    134 	.globl _P2INTEN
                                    135 	.globl _P1INTEN
                                    136 	.globl _P0INTEN
                                    137 	.globl _P2LVLSEL
                                    138 	.globl _P1LVLSEL
                                    139 	.globl _P0LVLSEL
                                    140 	.globl _P2
                                    141 	.globl _P1
                                    142 	.globl _P0
                                    143 	.globl _PERFMON4
                                    144 	.globl _PCL
                                    145 	.globl _PCH
                                    146 	.globl _PERFMON1
                                    147 	.globl _PERFMON0
                                    148 	.globl _PCON
                                    149 	.globl _DPS
                                    150 	.globl _DPH1
                                    151 	.globl _DPL1
                                    152 	.globl _DPH
                                    153 	.globl _DPL
                                    154 	.globl _ACC
                                    155 	.globl _B
                                    156 	.globl _epdSegmentData
                                    157 	.globl _curEpdSegmentData
                                    158 	.globl _screen_start_time
                                    159 	.globl _setEPDIcon_PARM_2
                                    160 	.globl _epdSetup_PARM_1
                                    161 	.globl _isInverted
                                    162 	.globl _display_is_drawing
                                    163 	.globl _epdWaitRdy
                                    164 	.globl _setEPDIcon
                                    165 	.globl _epdEnable
                                    166 	.globl _epdDisable
                                    167 	.globl _epdDraw
                                    168 	.globl _epdUpdate
                                    169 	.globl _epdSetup
                                    170 	.globl _epdClear
                                    171 	.globl _epdSetPos
                                    172 	.globl _writeCharEPD
                                    173 	.globl _is_drawing
                                    174 ;--------------------------------------------------------
                                    175 ; special function registers
                                    176 ;--------------------------------------------------------
                                    177 	.area RSEG    (ABS,DATA)
      000000                        178 	.org 0x0000
                           0000F0   179 _B	=	0x00f0
                           0000E0   180 _ACC	=	0x00e0
                           000082   181 _DPL	=	0x0082
                           000083   182 _DPH	=	0x0083
                           000084   183 _DPL1	=	0x0084
                           000085   184 _DPH1	=	0x0085
                           000092   185 _DPS	=	0x0092
                           000087   186 _PCON	=	0x0087
                           0000B2   187 _PERFMON0	=	0x00b2
                           0000B3   188 _PERFMON1	=	0x00b3
                           0000B4   189 _PCH	=	0x00b4
                           0000B5   190 _PCL	=	0x00b5
                           0000B6   191 _PERFMON4	=	0x00b6
                           000080   192 _P0	=	0x0080
                           000090   193 _P1	=	0x0090
                           0000A0   194 _P2	=	0x00a0
                           0000A3   195 _P0LVLSEL	=	0x00a3
                           0000A4   196 _P1LVLSEL	=	0x00a4
                           0000A5   197 _P2LVLSEL	=	0x00a5
                           0000A6   198 _P0INTEN	=	0x00a6
                           0000A7   199 _P1INTEN	=	0x00a7
                           0000A9   200 _P2INTEN	=	0x00a9
                           0000AA   201 _P0CHSTA	=	0x00aa
                           0000AB   202 _P1CHSTA	=	0x00ab
                           0000AC   203 _P2CHSTA	=	0x00ac
                           0000AD   204 _P0FUNC	=	0x00ad
                           0000AE   205 _P1FUNC	=	0x00ae
                           0000AF   206 _P2FUNC	=	0x00af
                           0000B9   207 _P0DIR	=	0x00b9
                           0000BA   208 _P1DIR	=	0x00ba
                           0000BB   209 _P2DIR	=	0x00bb
                           0000BC   210 _P0PULL	=	0x00bc
                           0000BD   211 _P1PULL	=	0x00bd
                           0000BE   212 _P2PULL	=	0x00be
                           0000A0   213 _XPAGE	=	0x00a0
                           0000A8   214 _IEN0	=	0x00a8
                           0000A1   215 _IEN1	=	0x00a1
                           00008E   216 _CLKSPEED	=	0x008e
                           0000B7   217 _CLKEN	=	0x00b7
                           00008F   218 _RESET	=	0x008f
                           0000BA   219 _WDTENA	=	0x00ba
                           0000BB   220 _WDTPET	=	0x00bb
                           0000BC   221 _WDTRSTVALL	=	0x00bc
                           0000BD   222 _WDTRSTVALM	=	0x00bd
                           0000BE   223 _WDTRSTVALH	=	0x00be
                           0000BF   224 _WDTCONF	=	0x00bf
                           0000EB   225 _SPIUNKNOWN	=	0x00eb
                           0000EC   226 _SPICFG	=	0x00ec
                           0000ED   227 _SPIENA	=	0x00ed
                           0000EE   228 _SPITX	=	0x00ee
                           0000EF   229 _SPIRX	=	0x00ef
                           000091   230 _I2CSTATE	=	0x0091
                           000094   231 _I2CBUF	=	0x0094
                           000095   232 _I2CCTL	=	0x0095
                           000096   233 _I2CSPEED	=	0x0096
                           0000A2   234 _I2CUNKNOWN	=	0x00a2
                           000098   235 _UARTSTA	=	0x0098
                           000099   236 _UARTBUF	=	0x0099
                           00009A   237 _UARTBRGL	=	0x009a
                           00009B   238 _UARTBRGH	=	0x009b
                           000088   239 _TCON	=	0x0088
                           000089   240 _TMOD	=	0x0089
                           00008A   241 _TL0	=	0x008a
                           00008B   242 _TL1	=	0x008b
                           00008C   243 _TH0	=	0x008c
                           00008D   244 _TH1	=	0x008d
                           008C8A   245 _T0	=	0x8c8a
                           008D8B   246 _T1	=	0x8d8b
                           0000D8   247 _FPGNO	=	0x00d8
                           0000D9   248 _FWRSRCL	=	0x00d9
                           0000DA   249 _FWRSRCH	=	0x00da
                           0000DB   250 _FWRDSTL	=	0x00db
                           0000DC   251 _FWRDSTH	=	0x00dc
                           0000DD   252 _FWRLENL	=	0x00dd
                           0000DE   253 _FWRLENH	=	0x00de
                           0000DF   254 _FWRTHREE	=	0x00df
                           0000E6   255 _TEMPCAL1	=	0x00e6
                           0000E7   256 _TEMPCAL2	=	0x00e7
                           0000F7   257 _TEMPCFG	=	0x00f7
                           0000F8   258 _TEMPRETH	=	0x00f8
                           0000F9   259 _TEMPRETL	=	0x00f9
                           0000FB   260 _TEMPCAL3	=	0x00fb
                           0000FC   261 _TEMPCAL4	=	0x00fc
                           0000FD   262 _TEMPCAL5	=	0x00fd
                           0000FE   263 _TEMPCAL6	=	0x00fe
                           0000C9   264 _RADIO_TXPTRL	=	0x00c9
                           0000CA   265 _RADIO_TXPTRH	=	0x00ca
                           0000CB   266 _RADIO_INITSEQ1	=	0x00cb
                           0000CC   267 _RADIO_INITSEQ2	=	0x00cc
                           0000CD   268 _RADIO_TXLEN	=	0x00cd
                           0000CE   269 _RADIO_INITSEQ0	=	0x00ce
                           0000D1   270 _RADIO_INITSEQ4	=	0x00d1
                           0000D2   271 _RADIO_INITSEQ5	=	0x00d2
                           0000D3   272 _RADIO_RXPTRL	=	0x00d3
                           0000D4   273 _RADIO_RXPTRH	=	0x00d4
                           0000D5   274 _RADIO_RXLEN	=	0x00d5
                           0000D6   275 _RADIO_INITSEQ3	=	0x00d6
                           0000FA   276 _RADIO_GOTLEN	=	0x00fa
                           0000C1   277 _UNK_C1	=	0x00c1
                           0000D7   278 _TRIGGER	=	0x00d7
                           0000C7   279 _SETTINGS	=	0x00c7
                           0000CF   280 _TCON2	=	0x00cf
                           0000FF   281 _CFGPAGE	=	0x00ff
                                    282 ;--------------------------------------------------------
                                    283 ; special function bits
                                    284 ;--------------------------------------------------------
                                    285 	.area RSEG    (ABS,DATA)
      000000                        286 	.org 0x0000
                           000080   287 _P0_0	=	0x0080
                           000081   288 _P0_1	=	0x0081
                           000082   289 _P0_2	=	0x0082
                           000083   290 _P0_3	=	0x0083
                           000084   291 _P0_4	=	0x0084
                           000085   292 _P0_5	=	0x0085
                           000086   293 _P0_6	=	0x0086
                           000087   294 _P0_7	=	0x0087
                           000090   295 _P1_0	=	0x0090
                           000091   296 _P1_1	=	0x0091
                           000092   297 _P1_2	=	0x0092
                           000093   298 _P1_3	=	0x0093
                           000094   299 _P1_4	=	0x0094
                           000095   300 _P1_5	=	0x0095
                           000096   301 _P1_6	=	0x0096
                           000097   302 _P1_7	=	0x0097
                           0000A0   303 _P2_0	=	0x00a0
                           0000A1   304 _P2_1	=	0x00a1
                           0000A2   305 _P2_2	=	0x00a2
                           0000A3   306 _P2_3	=	0x00a3
                           0000A4   307 _P2_4	=	0x00a4
                           0000A5   308 _P2_5	=	0x00a5
                           0000A6   309 _P2_6	=	0x00a6
                           0000A7   310 _P2_7	=	0x00a7
                           0000A8   311 _IEN_UART0	=	0x00a8
                           0000A9   312 _IEN_TMR0	=	0x00a9
                           0000AB   313 _IEN_TMR1	=	0x00ab
                           0000AC   314 _IEN_RF1	=	0x00ac
                           0000AD   315 _IEN_RF2	=	0x00ad
                           0000AF   316 _IEN_EA	=	0x00af
                           000098   317 _UART_RXF	=	0x0098
                           000099   318 _UART_TXE	=	0x0099
                                    319 ;--------------------------------------------------------
                                    320 ; overlayable register banks
                                    321 ;--------------------------------------------------------
                                    322 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        323 	.ds 8
                                    324 ;--------------------------------------------------------
                                    325 ; internal ram data
                                    326 ;--------------------------------------------------------
                                    327 	.area DSEG    (DATA)
      000000                        328 _screenPrvTimedWait_sloc0_1_0:
      000000                        329 	.ds 4
                                    330 ;--------------------------------------------------------
                                    331 ; overlayable items in internal ram
                                    332 ;--------------------------------------------------------
                                    333 ;--------------------------------------------------------
                                    334 ; indirectly addressable internal ram data
                                    335 ;--------------------------------------------------------
                                    336 	.area ISEG    (DATA)
                           000000   337 _R0	=	0x0000
                           000001   338 _R1	=	0x0001
                           000002   339 _R2	=	0x0002
                           000003   340 _R3	=	0x0003
                           000004   341 _R4	=	0x0004
                           000005   342 _R5	=	0x0005
                           000006   343 _R6	=	0x0006
                           000007   344 _R7	=	0x0007
                                    345 ;--------------------------------------------------------
                                    346 ; absolute internal ram data
                                    347 ;--------------------------------------------------------
                                    348 	.area IABS    (ABS,DATA)
                                    349 	.area IABS    (ABS,DATA)
                                    350 ;--------------------------------------------------------
                                    351 ; bit data
                                    352 ;--------------------------------------------------------
                                    353 	.area BSEG    (BIT)
      000000                        354 _display_is_drawing::
      000000                        355 	.ds 1
      000001                        356 _isInverted::
      000001                        357 	.ds 1
      000002                        358 _epdUpdate_sloc0_1_0:
      000002                        359 	.ds 1
      000003                        360 _epdSetup_PARM_1:
      000003                        361 	.ds 1
                                    362 ;--------------------------------------------------------
                                    363 ; paged external ram data
                                    364 ;--------------------------------------------------------
                                    365 	.area PSEG    (PAG,XDATA)
                                    366 ;--------------------------------------------------------
                                    367 ; external ram data
                                    368 ;--------------------------------------------------------
                                    369 	.area XSEG    (XDATA)
                           00DF48   370 _RADIO_command	=	0xdf48
                           00DF70   371 _RADIO_calibration_70	=	0xdf70
                           00DF71   372 _RADIO_calibration_71	=	0xdf71
                           00DF80   373 _RADIO_FLAGS	=	0xdf80
                           00DF81   374 _RADIO_calibration_81	=	0xdf81
                           00DF83   375 _RADIO_unk_83	=	0xdf83
                           00DF84   376 _RADIO_currentRSSI	=	0xdf84
                           00DF86   377 _RADIO_calibration_86	=	0xdf86
                           00DF88   378 _RADIO_ownMac_7	=	0xdf88
                           00DF89   379 _RADIO_ownMac_6	=	0xdf89
                           00DF8A   380 _RADIO_ownMac_5	=	0xdf8a
                           00DF8B   381 _RADIO_ownMac_4	=	0xdf8b
                           00DF8C   382 _RADIO_ownMac_3	=	0xdf8c
                           00DF8D   383 _RADIO_ownMac_2	=	0xdf8d
                           00DF8E   384 _RADIO_ownMac_1	=	0xdf8e
                           00DF8F   385 _RADIO_ownMac_0	=	0xdf8f
                           00DF90   386 _RADIO_PANID_Hi	=	0xdf90
                           00DF91   387 _RADIO_PANID_Lo	=	0xdf91
                           00DF92   388 _RADIO_ownShortAddress_Hi	=	0xdf92
                           00DF93   389 _RADIO_ownShortAddress_Lo	=	0xdf93
                           00DF94   390 _RADIO_calibration_94	=	0xdf94
                           00DF95   391 _RADIO_calibration_95	=	0xdf95
                           00DF96   392 _RADIO_calibration_96	=	0xdf96
                           00DF98   393 _RADIO_rxFirstByte	=	0xdf98
                           00DF9B   394 _RADIO_curRfState	=	0xdf9b
                           00DF9D   395 _RADIO_calibration_9D	=	0xdf9d
                           00DFA1   396 _RADIO_calibration_A1	=	0xdfa1
                           00DFA5   397 _RADIO_unk_rxAckSta	=	0xdfa5
                           00DFA6   398 _RADIO_unk_A6	=	0xdfa6
                           00DFAD   399 _RADIO_IRQ4_pending	=	0xdfad
                           00DFAF   400 _RADIO_unk_AF	=	0xdfaf
                           00DFC0   401 _RADIO_channel	=	0xdfc0
                           00DFC1   402 _RADIO_unk_C1	=	0xdfc1
                           00DFC2   403 _RADIO_calibration_C2	=	0xdfc2
                           00DFC3   404 _RADIO_calibration_C3	=	0xdfc3
                           00DFC4   405 _RADIO_calibration_C4	=	0xdfc4
                           00DFC5   406 _RADIO_calibration_C5	=	0xdfc5
                           00DFC6   407 _RADIO_calibration_C6	=	0xdfc6
                           00DFC7   408 _RADIO_calibration_C7	=	0xdfc7
                           00DFC8   409 _RADIO_unk_C8	=	0xdfc8
                           00DFC9   410 _RADIO_txPower	=	0xdfc9
                           00DFCA   411 _RADIO_unk_CA	=	0xdfca
                           00DFCB   412 _RADIO_perChannelSetting2	=	0xdfcb
                           00DFCD   413 _RADIO_unk_CD	=	0xdfcd
                           00DFCE   414 _RADIO_unk_CE	=	0xdfce
                           00DFCF   415 _RADIO_calibration_CF	=	0xdfcf
                           00DFD0   416 _RADIO_calibration_D0	=	0xdfd0
                           00DFD1   417 _RADIO_calibration_D1	=	0xdfd1
                           00DFD2   418 _RADIO_calibration_D2	=	0xdfd2
                           00DFD3   419 _RADIO_calibration_D3	=	0xdfd3
                           00DFD4   420 _RADIO_calibration_D4	=	0xdfd4
                           00DFD5   421 _RADIO_calibration_D5	=	0xdfd5
                           00DFD7   422 _RADIO_unk_D7	=	0xdfd7
                           00DFD8   423 _RADIO_unk_D8	=	0xdfd8
                           00DFD9   424 _RADIO_SleepTimerHi	=	0xdfd9
                           00DFDA   425 _RADIO_SleepTimerMid	=	0xdfda
                           00DFDB   426 _RADIO_SleepTimerLo	=	0xdfdb
                           00DFE2   427 _RADIO_unk_E2	=	0xdfe2
                           00DFF0   428 _RADIO_unk_F0	=	0xdff0
                           00DFF3   429 _RADIO_SleepTimerSettings	=	0xdff3
                           00DFF4   430 _RADIO_RadioPowerCtl	=	0xdff4
                           00DFFD   431 _RADIO_perChannelSetting1	=	0xdffd
      000000                        432 _screenPrvTimedWait_maxTicks_65536_54:
      000000                        433 	.ds 4
      000004                        434 _screenPrvRegWriteGuts_PARM_2:
      000004                        435 	.ds 1
      000005                        436 _screenPrvRegWriteGuts_val_65536_57:
      000005                        437 	.ds 4
      000009                        438 _charDecode_c_65536_60:
      000009                        439 	.ds 1
      00000A                        440 _segmentBitSwap_val_65536_66:
      00000A                        441 	.ds 1
      00000B                        442 _segmentBitSwap_ret_65536_67:
      00000B                        443 	.ds 1
      00000C                        444 _writeDigitToBuffer_PARM_2:
      00000C                        445 	.ds 1
      00000D                        446 _writeDigitToBuffer_pos_65536_68:
      00000D                        447 	.ds 1
      00000E                        448 _iconSet_PARM_2:
      00000E                        449 	.ds 1
      00000F                        450 _iconSet_PARM_3:
      00000F                        451 	.ds 1
      000010                        452 _iconSet_byte_65536_71:
      000010                        453 	.ds 1
      000011                        454 _setEPDIcon_PARM_2:
      000011                        455 	.ds 1
      000012                        456 _setEPDIcon_iconvalue_65536_75:
      000012                        457 	.ds 2
      000014                        458 _epdSetPos_p_65536_87:
      000014                        459 	.ds 1
      000015                        460 _writeCharEPD_c_65536_90:
      000015                        461 	.ds 1
      000016                        462 _epdPrint_buffer_65536_94:
      000016                        463 	.ds 10
                                    464 ;--------------------------------------------------------
                                    465 ; absolute external ram data
                                    466 ;--------------------------------------------------------
                                    467 	.area XABS    (ABS,XDATA)
                                    468 ;--------------------------------------------------------
                                    469 ; external initialized ram data
                                    470 ;--------------------------------------------------------
                                    471 	.area XISEG   (XDATA)
      000000                        472 _screen_start_time::
      000000                        473 	.ds 4
      000004                        474 _curEpdSegmentData::
      000004                        475 	.ds 12
      000010                        476 _epdSegmentData::
      000010                        477 	.ds 12
      00001C                        478 _position:
      00001C                        479 	.ds 1
                                    480 	.area HOME    (CODE)
                                    481 	.area GSINIT0 (CODE)
                                    482 	.area GSINIT1 (CODE)
                                    483 	.area GSINIT2 (CODE)
                                    484 	.area GSINIT3 (CODE)
                                    485 	.area GSINIT4 (CODE)
                                    486 	.area GSINIT5 (CODE)
                                    487 	.area GSINIT  (CODE)
                                    488 	.area GSFINAL (CODE)
                                    489 	.area CSEG    (CODE)
                                    490 ;--------------------------------------------------------
                                    491 ; global & static initialisations
                                    492 ;--------------------------------------------------------
                                    493 	.area HOME    (CODE)
                                    494 	.area GSINIT  (CODE)
                                    495 	.area GSFINAL (CODE)
                                    496 	.area GSINIT  (CODE)
                                    497 ;	board/zbs_segmented_uk/../sem9010.c:12: __bit display_is_drawing = 0;
                                    498 ;	assignBit
      000000 C2*00            [12]  499 	clr	_display_is_drawing
                                    500 ;	board/zbs_segmented_uk/../sem9010.c:14: __bit isInverted = false;
                                    501 ;	assignBit
      000002 C2*01            [12]  502 	clr	_isInverted
                                    503 ;--------------------------------------------------------
                                    504 ; Home
                                    505 ;--------------------------------------------------------
                                    506 	.area HOME    (CODE)
                                    507 	.area HOME    (CODE)
                                    508 ;--------------------------------------------------------
                                    509 ; code
                                    510 ;--------------------------------------------------------
                                    511 	.area CSEG    (CODE)
                                    512 ;------------------------------------------------------------
                                    513 ;Allocation info for local variables in function 'screenPrvTimedWait'
                                    514 ;------------------------------------------------------------
                                    515 ;sloc0                     Allocated with name '_screenPrvTimedWait_sloc0_1_0'
                                    516 ;maxTicks                  Allocated with name '_screenPrvTimedWait_maxTicks_65536_54'
                                    517 ;startTicks                Allocated with name '_screenPrvTimedWait_startTicks_65536_55'
                                    518 ;------------------------------------------------------------
                                    519 ;	board/zbs_segmented_uk/../sem9010.c:20: static __bit screenPrvTimedWait(uint32_t maxTicks) {
                                    520 ;	-----------------------------------------
                                    521 ;	 function screenPrvTimedWait
                                    522 ;	-----------------------------------------
      000000                        523 _screenPrvTimedWait:
                           000007   524 	ar7 = 0x07
                           000006   525 	ar6 = 0x06
                           000005   526 	ar5 = 0x05
                           000004   527 	ar4 = 0x04
                           000003   528 	ar3 = 0x03
                           000002   529 	ar2 = 0x02
                           000001   530 	ar1 = 0x01
                           000000   531 	ar0 = 0x00
      000000 C0 07            [24]  532 	push	ar7
      000002 C0 06            [24]  533 	push	ar6
      000004 C0 05            [24]  534 	push	ar5
      000006 C0 04            [24]  535 	push	ar4
      000008 C0 03            [24]  536 	push	ar3
      00000A C0 02            [24]  537 	push	ar2
      00000C C0 01            [24]  538 	push	ar1
      00000E C0 00            [24]  539 	push	ar0
      000010 AF 82            [24]  540 	mov	r7,dpl
      000012 AE 83            [24]  541 	mov	r6,dph
      000014 AD F0            [24]  542 	mov	r5,b
      000016 FC               [12]  543 	mov	r4,a
      000017 90r00r00         [24]  544 	mov	dptr,#_screenPrvTimedWait_maxTicks_65536_54
      00001A EF               [12]  545 	mov	a,r7
      00001B F0               [24]  546 	movx	@dptr,a
      00001C EE               [12]  547 	mov	a,r6
      00001D A3               [24]  548 	inc	dptr
      00001E F0               [24]  549 	movx	@dptr,a
      00001F ED               [12]  550 	mov	a,r5
      000020 A3               [24]  551 	inc	dptr
      000021 F0               [24]  552 	movx	@dptr,a
      000022 EC               [12]  553 	mov	a,r4
      000023 A3               [24]  554 	inc	dptr
      000024 F0               [24]  555 	movx	@dptr,a
                                    556 ;	board/zbs_segmented_uk/../sem9010.c:21: uint32_t startTicks = timerGet();
      000025 12r00r00         [24]  557 	lcall	_timerGet
      000028 AC 82            [24]  558 	mov	r4,dpl
      00002A AD 83            [24]  559 	mov	r5,dph
      00002C AE F0            [24]  560 	mov	r6,b
      00002E FF               [12]  561 	mov	r7,a
                                    562 ;	board/zbs_segmented_uk/../sem9010.c:23: while (timerGet() - startTicks < maxTicks) {
      00002F 90r00r00         [24]  563 	mov	dptr,#_screenPrvTimedWait_maxTicks_65536_54
      000032 E0               [24]  564 	movx	a,@dptr
      000033 F5*00            [12]  565 	mov	_screenPrvTimedWait_sloc0_1_0,a
      000035 A3               [24]  566 	inc	dptr
      000036 E0               [24]  567 	movx	a,@dptr
      000037 F5*01            [12]  568 	mov	(_screenPrvTimedWait_sloc0_1_0 + 1),a
      000039 A3               [24]  569 	inc	dptr
      00003A E0               [24]  570 	movx	a,@dptr
      00003B F5*02            [12]  571 	mov	(_screenPrvTimedWait_sloc0_1_0 + 2),a
      00003D A3               [24]  572 	inc	dptr
      00003E E0               [24]  573 	movx	a,@dptr
      00003F F5*03            [12]  574 	mov	(_screenPrvTimedWait_sloc0_1_0 + 3),a
      000041                        575 00103$:
      000041 12r00r00         [24]  576 	lcall	_timerGet
      000044 A8 82            [24]  577 	mov	r0,dpl
      000046 A9 83            [24]  578 	mov	r1,dph
      000048 AA F0            [24]  579 	mov	r2,b
      00004A FB               [12]  580 	mov	r3,a
      00004B E8               [12]  581 	mov	a,r0
      00004C C3               [12]  582 	clr	c
      00004D 9C               [12]  583 	subb	a,r4
      00004E F8               [12]  584 	mov	r0,a
      00004F E9               [12]  585 	mov	a,r1
      000050 9D               [12]  586 	subb	a,r5
      000051 F9               [12]  587 	mov	r1,a
      000052 EA               [12]  588 	mov	a,r2
      000053 9E               [12]  589 	subb	a,r6
      000054 FA               [12]  590 	mov	r2,a
      000055 EB               [12]  591 	mov	a,r3
      000056 9F               [12]  592 	subb	a,r7
      000057 FB               [12]  593 	mov	r3,a
      000058 C3               [12]  594 	clr	c
      000059 E8               [12]  595 	mov	a,r0
      00005A 95*00            [12]  596 	subb	a,_screenPrvTimedWait_sloc0_1_0
      00005C E9               [12]  597 	mov	a,r1
      00005D 95*01            [12]  598 	subb	a,(_screenPrvTimedWait_sloc0_1_0 + 1)
      00005F EA               [12]  599 	mov	a,r2
      000060 95*02            [12]  600 	subb	a,(_screenPrvTimedWait_sloc0_1_0 + 2)
      000062 EB               [12]  601 	mov	a,r3
      000063 95*03            [12]  602 	subb	a,(_screenPrvTimedWait_sloc0_1_0 + 3)
      000065 50 06            [24]  603 	jnc	00105$
                                    604 ;	board/zbs_segmented_uk/../sem9010.c:24: if (!P2_0)
      000067 20 A0 D7         [24]  605 	jb	_P2_0,00103$
                                    606 ;	board/zbs_segmented_uk/../sem9010.c:25: return true;
      00006A D3               [12]  607 	setb	c
      00006B 80 01            [24]  608 	sjmp	00106$
      00006D                        609 00105$:
                                    610 ;	board/zbs_segmented_uk/../sem9010.c:28: return false;
      00006D C3               [12]  611 	clr	c
      00006E                        612 00106$:
                                    613 ;	board/zbs_segmented_uk/../sem9010.c:29: }
      00006E D0 00            [24]  614 	pop	ar0
      000070 D0 01            [24]  615 	pop	ar1
      000072 D0 02            [24]  616 	pop	ar2
      000074 D0 03            [24]  617 	pop	ar3
      000076 D0 04            [24]  618 	pop	ar4
      000078 D0 05            [24]  619 	pop	ar5
      00007A D0 06            [24]  620 	pop	ar6
      00007C D0 07            [24]  621 	pop	ar7
      00007E 22               [24]  622 	ret
                                    623 ;------------------------------------------------------------
                                    624 ;Allocation info for local variables in function 'screenPrvRegWriteGuts'
                                    625 ;------------------------------------------------------------
                                    626 ;reg                       Allocated with name '_screenPrvRegWriteGuts_PARM_2'
                                    627 ;val                       Allocated with name '_screenPrvRegWriteGuts_val_65536_57'
                                    628 ;------------------------------------------------------------
                                    629 ;	board/zbs_segmented_uk/../sem9010.c:31: static __bit screenPrvRegWriteGuts(uint32_t val, uint8_t reg) {  // order because sdcc sucks
                                    630 ;	-----------------------------------------
                                    631 ;	 function screenPrvRegWriteGuts
                                    632 ;	-----------------------------------------
      00007F                        633 _screenPrvRegWriteGuts:
      00007F C0 07            [24]  634 	push	ar7
      000081 C0 06            [24]  635 	push	ar6
      000083 C0 05            [24]  636 	push	ar5
      000085 C0 04            [24]  637 	push	ar4
      000087 C0 03            [24]  638 	push	ar3
      000089 AF 82            [24]  639 	mov	r7,dpl
      00008B AE 83            [24]  640 	mov	r6,dph
      00008D AD F0            [24]  641 	mov	r5,b
      00008F FC               [12]  642 	mov	r4,a
      000090 90r00r05         [24]  643 	mov	dptr,#_screenPrvRegWriteGuts_val_65536_57
      000093 EF               [12]  644 	mov	a,r7
      000094 F0               [24]  645 	movx	@dptr,a
      000095 EE               [12]  646 	mov	a,r6
      000096 A3               [24]  647 	inc	dptr
      000097 F0               [24]  648 	movx	@dptr,a
      000098 ED               [12]  649 	mov	a,r5
      000099 A3               [24]  650 	inc	dptr
      00009A F0               [24]  651 	movx	@dptr,a
      00009B EC               [12]  652 	mov	a,r4
      00009C A3               [24]  653 	inc	dptr
      00009D F0               [24]  654 	movx	@dptr,a
                                    655 ;	board/zbs_segmented_uk/../sem9010.c:32: if (!screenPrvTimedWait(TIMER_TICKS_PER_SECOND / 1000))
      00009E 90 05 35         [24]  656 	mov	dptr,#0x0535
      0000A1 E4               [12]  657 	clr	a
      0000A2 F5 F0            [12]  658 	mov	b,a
      0000A4 12r00r00         [24]  659 	lcall	_screenPrvTimedWait
                                    660 ;	board/zbs_segmented_uk/../sem9010.c:33: return false;
      0000A7 40 02            [24]  661 	jc	00102$
      0000A9 80 33            [24]  662 	sjmp	00103$
      0000AB                        663 00102$:
                                    664 ;	board/zbs_segmented_uk/../sem9010.c:35: P2_1 = 0;
                                    665 ;	assignBit
      0000AB C2 A1            [12]  666 	clr	_P2_1
                                    667 ;	board/zbs_segmented_uk/../sem9010.c:36: spiByte((uint8_t)0x80 + (uint8_t)(reg << 1));
      0000AD 90r00r04         [24]  668 	mov	dptr,#_screenPrvRegWriteGuts_PARM_2
      0000B0 E0               [24]  669 	movx	a,@dptr
      0000B1 25 E0            [12]  670 	add	a,acc
      0000B3 24 80            [12]  671 	add	a,#0x80
      0000B5 F5 82            [12]  672 	mov	dpl,a
      0000B7 12r00r00         [24]  673 	lcall	_spiByte
                                    674 ;	board/zbs_segmented_uk/../sem9010.c:37: spiByte(val >> 16);
      0000BA 90r00r05         [24]  675 	mov	dptr,#_screenPrvRegWriteGuts_val_65536_57
      0000BD E0               [24]  676 	movx	a,@dptr
      0000BE FC               [12]  677 	mov	r4,a
      0000BF A3               [24]  678 	inc	dptr
      0000C0 E0               [24]  679 	movx	a,@dptr
      0000C1 FD               [12]  680 	mov	r5,a
      0000C2 A3               [24]  681 	inc	dptr
      0000C3 E0               [24]  682 	movx	a,@dptr
      0000C4 FE               [12]  683 	mov	r6,a
      0000C5 A3               [24]  684 	inc	dptr
      0000C6 E0               [24]  685 	movx	a,@dptr
      0000C7 FF               [12]  686 	mov	r7,a
      0000C8 8E 03            [24]  687 	mov	ar3,r6
      0000CA 8B 82            [24]  688 	mov	dpl,r3
      0000CC 12r00r00         [24]  689 	lcall	_spiByte
                                    690 ;	board/zbs_segmented_uk/../sem9010.c:38: spiByte(val >> 8);
      0000CF 8D 03            [24]  691 	mov	ar3,r5
      0000D1 8B 82            [24]  692 	mov	dpl,r3
      0000D3 12r00r00         [24]  693 	lcall	_spiByte
                                    694 ;	board/zbs_segmented_uk/../sem9010.c:39: spiByte(val);
      0000D6 8C 82            [24]  695 	mov	dpl,r4
      0000D8 12r00r00         [24]  696 	lcall	_spiByte
                                    697 ;	board/zbs_segmented_uk/../sem9010.c:40: P2_1 = 1;
                                    698 ;	assignBit
      0000DB D2 A1            [12]  699 	setb	_P2_1
                                    700 ;	board/zbs_segmented_uk/../sem9010.c:42: return true;
      0000DD D3               [12]  701 	setb	c
      0000DE                        702 00103$:
                                    703 ;	board/zbs_segmented_uk/../sem9010.c:43: }
      0000DE D0 03            [24]  704 	pop	ar3
      0000E0 D0 04            [24]  705 	pop	ar4
      0000E2 D0 05            [24]  706 	pop	ar5
      0000E4 D0 06            [24]  707 	pop	ar6
      0000E6 D0 07            [24]  708 	pop	ar7
      0000E8 22               [24]  709 	ret
                                    710 ;------------------------------------------------------------
                                    711 ;Allocation info for local variables in function 'epdWaitRdy'
                                    712 ;------------------------------------------------------------
                                    713 ;	board/zbs_segmented_uk/../sem9010.c:45: void epdWaitRdy() {
                                    714 ;	-----------------------------------------
                                    715 ;	 function epdWaitRdy
                                    716 ;	-----------------------------------------
      0000E9                        717 _epdWaitRdy:
                                    718 ;	board/zbs_segmented_uk/../sem9010.c:46: if (!screenPrvTimedWait(TIMER_TICKS_PER_SECOND / 1000))
      0000E9 90 05 35         [24]  719 	mov	dptr,#0x0535
      0000EC E4               [12]  720 	clr	a
      0000ED F5 F0            [12]  721 	mov	b,a
      0000EF 12r00r00         [24]  722 	lcall	_screenPrvTimedWait
      0000F2 40 00            [24]  723 	jc	00103$
                                    724 ;	board/zbs_segmented_uk/../sem9010.c:47: return;
      0000F4                        725 00103$:
                                    726 ;	board/zbs_segmented_uk/../sem9010.c:48: }
      0000F4 22               [24]  727 	ret
                                    728 ;------------------------------------------------------------
                                    729 ;Allocation info for local variables in function 'charDecode'
                                    730 ;------------------------------------------------------------
                                    731 ;c                         Allocated with name '_charDecode_c_65536_60'
                                    732 ;------------------------------------------------------------
                                    733 ;	board/zbs_segmented_uk/../sem9010.c:50: static uint8_t charDecode(uint8_t c) {
                                    734 ;	-----------------------------------------
                                    735 ;	 function charDecode
                                    736 ;	-----------------------------------------
      0000F5                        737 _charDecode:
      0000F5 E5 82            [12]  738 	mov	a,dpl
      0000F7 90r00r09         [24]  739 	mov	dptr,#_charDecode_c_65536_60
                                    740 ;	board/zbs_segmented_uk/../sem9010.c:111: if (c > 0x2F && c < 0x3A) {
      0000FA F0               [24]  741 	movx	@dptr,a ; Peephole dmitrygr.0005 - SRSLY, WTF?
      0000FB FF               [12]  742 	mov  r7,a
      0000FC 24 D0            [12]  743 	add	a,#0xff - 0x2f
      0000FE 50 1C            [24]  744 	jnc	00102$
      000100 BF 3A 00         [24]  745 	cjne	r7,#0x3a,00199$
      000103                        746 00199$:
      000103 50 17            [24]  747 	jnc	00102$
                                    748 ;	board/zbs_segmented_uk/../sem9010.c:112: return numbers[c - 0x30];
      000105 EF               [12]  749 	mov	a,r7
      000106 24 D0            [12]  750 	add	a,#0xd0
      000108 FF               [12]  751 	mov	r7,a
      000109 33               [12]  752 	rlc	a
      00010A 95 E0            [12]  753 	subb	a,acc
      00010C FE               [12]  754 	mov	r6,a
      00010D EF               [12]  755 	mov	a,r7
      00010E 24r00            [12]  756 	add	a,#_charDecode_numbers_65536_61
      000110 F5 82            [12]  757 	mov	dpl,a
      000112 EE               [12]  758 	mov	a,r6
      000113 34s00            [12]  759 	addc	a,#(_charDecode_numbers_65536_61 >> 8)
      000115 F5 83            [12]  760 	mov	dph,a
      000117 E4               [12]  761 	clr	a
      000118 93               [24]  762 	movc	a,@a+dptr
      000119 F5 82            [12]  763 	mov	dpl,a
      00011B 22               [24]  764 	ret
      00011C                        765 00102$:
                                    766 ;	board/zbs_segmented_uk/../sem9010.c:115: if (c > 0x60 && c < 0x7b) {
      00011C 90r00r09         [24]  767 	mov	dptr,#_charDecode_c_65536_60
      00011F E0               [24]  768 	movx	a,@dptr
      000120 FF               [12]  769 	mov  r7,a
      000121 24 9F            [12]  770 	add	a,#0xff - 0x60
      000123 50 1C            [24]  771 	jnc	00105$
      000125 BF 7B 00         [24]  772 	cjne	r7,#0x7b,00202$
      000128                        773 00202$:
      000128 50 17            [24]  774 	jnc	00105$
                                    775 ;	board/zbs_segmented_uk/../sem9010.c:116: return lowercase[c - 0x61];
      00012A EF               [12]  776 	mov	a,r7
      00012B 24 9F            [12]  777 	add	a,#0x9f
      00012D FF               [12]  778 	mov	r7,a
      00012E 33               [12]  779 	rlc	a
      00012F 95 E0            [12]  780 	subb	a,acc
      000131 FE               [12]  781 	mov	r6,a
      000132 EF               [12]  782 	mov	a,r7
      000133 24r0A            [12]  783 	add	a,#_charDecode_lowercase_65536_61
      000135 F5 82            [12]  784 	mov	dpl,a
      000137 EE               [12]  785 	mov	a,r6
      000138 34s00            [12]  786 	addc	a,#(_charDecode_lowercase_65536_61 >> 8)
      00013A F5 83            [12]  787 	mov	dph,a
      00013C E4               [12]  788 	clr	a
      00013D 93               [24]  789 	movc	a,@a+dptr
      00013E F5 82            [12]  790 	mov	dpl,a
      000140 22               [24]  791 	ret
      000141                        792 00105$:
                                    793 ;	board/zbs_segmented_uk/../sem9010.c:119: if (c > 0x40 && c < 0x5B) {
      000141 90r00r09         [24]  794 	mov	dptr,#_charDecode_c_65536_60
      000144 E0               [24]  795 	movx	a,@dptr
      000145 FF               [12]  796 	mov  r7,a
      000146 24 BF            [12]  797 	add	a,#0xff - 0x40
      000148 50 1C            [24]  798 	jnc	00108$
      00014A BF 5B 00         [24]  799 	cjne	r7,#0x5b,00205$
      00014D                        800 00205$:
      00014D 50 17            [24]  801 	jnc	00108$
                                    802 ;	board/zbs_segmented_uk/../sem9010.c:120: return uppercase[c - 0x41];
      00014F EF               [12]  803 	mov	a,r7
      000150 24 BF            [12]  804 	add	a,#0xbf
      000152 FF               [12]  805 	mov	r7,a
      000153 33               [12]  806 	rlc	a
      000154 95 E0            [12]  807 	subb	a,acc
      000156 FE               [12]  808 	mov	r6,a
      000157 EF               [12]  809 	mov	a,r7
      000158 24r24            [12]  810 	add	a,#_charDecode_uppercase_65536_61
      00015A F5 82            [12]  811 	mov	dpl,a
      00015C EE               [12]  812 	mov	a,r6
      00015D 34s00            [12]  813 	addc	a,#(_charDecode_uppercase_65536_61 >> 8)
      00015F F5 83            [12]  814 	mov	dph,a
      000161 E4               [12]  815 	clr	a
      000162 93               [24]  816 	movc	a,@a+dptr
      000163 F5 82            [12]  817 	mov	dpl,a
      000165 22               [24]  818 	ret
      000166                        819 00108$:
                                    820 ;	board/zbs_segmented_uk/../sem9010.c:132: switch (c) {
      000166 90r00r09         [24]  821 	mov	dptr,#_charDecode_c_65536_60
      000169 E0               [24]  822 	movx	a,@dptr
      00016A FF               [12]  823 	mov	r7,a
      00016B BF 20 02         [24]  824 	cjne	r7,#0x20,00207$
      00016E 80 37            [24]  825 	sjmp	00110$
      000170                        826 00207$:
      000170 BF 23 02         [24]  827 	cjne	r7,#0x23,00208$
      000173 80 56            [24]  828 	sjmp	00121$
      000175                        829 00208$:
      000175 BF 28 02         [24]  830 	cjne	r7,#0x28,00209$
      000178 80 35            [24]  831 	sjmp	00113$
      00017A                        832 00209$:
      00017A BF 29 02         [24]  833 	cjne	r7,#0x29,00210$
      00017D 80 34            [24]  834 	sjmp	00115$
      00017F                        835 00210$:
      00017F BF 2D 02         [24]  836 	cjne	r7,#0x2d,00211$
      000182 80 27            [24]  837 	sjmp	00111$
      000184                        838 00211$:
      000184 BF 3C 02         [24]  839 	cjne	r7,#0x3c,00212$
      000187 80 2E            [24]  840 	sjmp	00116$
      000189                        841 00212$:
      000189 BF 3D 02         [24]  842 	cjne	r7,#0x3d,00213$
      00018C 80 39            [24]  843 	sjmp	00120$
      00018E                        844 00213$:
      00018E BF 3E 02         [24]  845 	cjne	r7,#0x3e,00214$
      000191 80 28            [24]  846 	sjmp	00117$
      000193                        847 00214$:
      000193 BF 5B 02         [24]  848 	cjne	r7,#0x5b,00215$
      000196 80 17            [24]  849 	sjmp	00113$
      000198                        850 00215$:
      000198 BF 5D 02         [24]  851 	cjne	r7,#0x5d,00216$
      00019B 80 16            [24]  852 	sjmp	00115$
      00019D                        853 00216$:
      00019D BF 5E 02         [24]  854 	cjne	r7,#0x5e,00217$
      0001A0 80 21            [24]  855 	sjmp	00119$
      0001A2                        856 00217$:
                                    857 ;	board/zbs_segmented_uk/../sem9010.c:133: case 0x20:  // space
      0001A2 BF 5F 2A         [24]  858 	cjne	r7,#0x5f,00122$
      0001A5 80 18            [24]  859 	sjmp	00118$
      0001A7                        860 00110$:
                                    861 ;	board/zbs_segmented_uk/../sem9010.c:134: return 0x00;
      0001A7 75 82 00         [24]  862 	mov	dpl,#0x00
                                    863 ;	board/zbs_segmented_uk/../sem9010.c:135: case 0x2D:  // -
      0001AA 22               [24]  864 	ret
      0001AB                        865 00111$:
                                    866 ;	board/zbs_segmented_uk/../sem9010.c:136: return 0b00001000;
      0001AB 75 82 08         [24]  867 	mov	dpl,#0x08
                                    868 ;	board/zbs_segmented_uk/../sem9010.c:138: case 0x5B:  // [
      0001AE 22               [24]  869 	ret
      0001AF                        870 00113$:
                                    871 ;	board/zbs_segmented_uk/../sem9010.c:139: return 0b00110110;
      0001AF 75 82 36         [24]  872 	mov	dpl,#0x36
                                    873 ;	board/zbs_segmented_uk/../sem9010.c:141: case 0x5D:  // ]
      0001B2 22               [24]  874 	ret
      0001B3                        875 00115$:
                                    876 ;	board/zbs_segmented_uk/../sem9010.c:142: return 0b11100010;
      0001B3 75 82 E2         [24]  877 	mov	dpl,#0xe2
                                    878 ;	board/zbs_segmented_uk/../sem9010.c:143: case 0x3C:  // <
      0001B6 22               [24]  879 	ret
      0001B7                        880 00116$:
                                    881 ;	board/zbs_segmented_uk/../sem9010.c:144: return 0b00001110;
      0001B7 75 82 0E         [24]  882 	mov	dpl,#0x0e
                                    883 ;	board/zbs_segmented_uk/../sem9010.c:145: case 0x3E:  // >
      0001BA 22               [24]  884 	ret
      0001BB                        885 00117$:
                                    886 ;	board/zbs_segmented_uk/../sem9010.c:146: return 0b10001010;
      0001BB 75 82 8A         [24]  887 	mov	dpl,#0x8a
                                    888 ;	board/zbs_segmented_uk/../sem9010.c:147: case 0x5F:  // _
      0001BE 22               [24]  889 	ret
      0001BF                        890 00118$:
                                    891 ;	board/zbs_segmented_uk/../sem9010.c:148: return 0b00000010;
      0001BF 75 82 02         [24]  892 	mov	dpl,#0x02
                                    893 ;	board/zbs_segmented_uk/../sem9010.c:149: case 0x5E:  // ^
      0001C2 22               [24]  894 	ret
      0001C3                        895 00119$:
                                    896 ;	board/zbs_segmented_uk/../sem9010.c:150: return 0b01111000;
      0001C3 75 82 78         [24]  897 	mov	dpl,#0x78
                                    898 ;	board/zbs_segmented_uk/../sem9010.c:151: case 0x3D:  // =
      0001C6 22               [24]  899 	ret
      0001C7                        900 00120$:
                                    901 ;	board/zbs_segmented_uk/../sem9010.c:152: return 0b00001010;
      0001C7 75 82 0A         [24]  902 	mov	dpl,#0x0a
                                    903 ;	board/zbs_segmented_uk/../sem9010.c:153: case 0x23:  // #
      0001CA 22               [24]  904 	ret
      0001CB                        905 00121$:
                                    906 ;	board/zbs_segmented_uk/../sem9010.c:154: return 0b10000100;
      0001CB 75 82 84         [24]  907 	mov	dpl,#0x84
                                    908 ;	board/zbs_segmented_uk/../sem9010.c:155: default:
      0001CE 22               [24]  909 	ret
      0001CF                        910 00122$:
                                    911 ;	board/zbs_segmented_uk/../sem9010.c:156: return 0x00;
      0001CF 75 82 00         [24]  912 	mov	dpl,#0x00
                                    913 ;	board/zbs_segmented_uk/../sem9010.c:157: }
                                    914 ;	board/zbs_segmented_uk/../sem9010.c:158: }
      0001D2 22               [24]  915 	ret
                                    916 ;------------------------------------------------------------
                                    917 ;Allocation info for local variables in function 'segmentBitSwap'
                                    918 ;------------------------------------------------------------
                                    919 ;val                       Allocated with name '_segmentBitSwap_val_65536_66'
                                    920 ;ret                       Allocated with name '_segmentBitSwap_ret_65536_67'
                                    921 ;------------------------------------------------------------
                                    922 ;	board/zbs_segmented_uk/../sem9010.c:159: static uint8_t segmentBitSwap(uint8_t val) {
                                    923 ;	-----------------------------------------
                                    924 ;	 function segmentBitSwap
                                    925 ;	-----------------------------------------
      0001D3                        926 _segmentBitSwap:
      0001D3 E5 82            [12]  927 	mov	a,dpl
      0001D5 90r00r0A         [24]  928 	mov	dptr,#_segmentBitSwap_val_65536_66
      0001D8 F0               [24]  929 	movx	@dptr,a
                                    930 ;	board/zbs_segmented_uk/../sem9010.c:160: uint8_t __xdata ret = 0;
      0001D9 90r00r0B         [24]  931 	mov	dptr,#_segmentBitSwap_ret_65536_67
      0001DC E4               [12]  932 	clr	a
      0001DD F0               [24]  933 	movx	@dptr,a
                                    934 ;	board/zbs_segmented_uk/../sem9010.c:161: if (val & 0x02) ret |= (1 << 5);
      0001DE 90r00r0A         [24]  935 	mov	dptr,#_segmentBitSwap_val_65536_66
      0001E1 E0               [24]  936 	movx	a,@dptr
      0001E2 30 E1 06         [24]  937 	jnb	acc.1,00102$
      0001E5 90r00r0B         [24]  938 	mov	dptr,#_segmentBitSwap_ret_65536_67
      0001E8 74 20            [12]  939 	mov	a,#0x20
      0001EA F0               [24]  940 	movx	@dptr,a
      0001EB                        941 00102$:
                                    942 ;	board/zbs_segmented_uk/../sem9010.c:162: if (val & 0x04) ret |= (1 << 6);
      0001EB 90r00r0A         [24]  943 	mov	dptr,#_segmentBitSwap_val_65536_66
      0001EE E0               [24]  944 	movx	a,@dptr
      0001EF 30 E2 08         [24]  945 	jnb	acc.2,00104$
      0001F2 90r00r0B         [24]  946 	mov	dptr,#_segmentBitSwap_ret_65536_67
      0001F5 E0               [24]  947 	movx	a,@dptr
      0001F6 43 E0 40         [24]  948 	orl	acc,#0x40
      0001F9 F0               [24]  949 	movx	@dptr,a
      0001FA                        950 00104$:
                                    951 ;	board/zbs_segmented_uk/../sem9010.c:163: if (val & 0x08) ret |= (1 << 3);
      0001FA 90r00r0A         [24]  952 	mov	dptr,#_segmentBitSwap_val_65536_66
      0001FD E0               [24]  953 	movx	a,@dptr
      0001FE 30 E3 08         [24]  954 	jnb	acc.3,00106$
      000201 90r00r0B         [24]  955 	mov	dptr,#_segmentBitSwap_ret_65536_67
      000204 E0               [24]  956 	movx	a,@dptr
      000205 43 E0 08         [24]  957 	orl	acc,#0x08
      000208 F0               [24]  958 	movx	@dptr,a
      000209                        959 00106$:
                                    960 ;	board/zbs_segmented_uk/../sem9010.c:164: if (val & 0x10) ret |= (1 << 7);
      000209 90r00r0A         [24]  961 	mov	dptr,#_segmentBitSwap_val_65536_66
      00020C E0               [24]  962 	movx	a,@dptr
      00020D 30 E4 08         [24]  963 	jnb	acc.4,00108$
      000210 90r00r0B         [24]  964 	mov	dptr,#_segmentBitSwap_ret_65536_67
      000213 E0               [24]  965 	movx	a,@dptr
      000214 43 E0 80         [24]  966 	orl	acc,#0x80
      000217 F0               [24]  967 	movx	@dptr,a
      000218                        968 00108$:
                                    969 ;	board/zbs_segmented_uk/../sem9010.c:165: if (val & 0x20) ret |= (1 << 1);
      000218 90r00r0A         [24]  970 	mov	dptr,#_segmentBitSwap_val_65536_66
      00021B E0               [24]  971 	movx	a,@dptr
      00021C 30 E5 08         [24]  972 	jnb	acc.5,00110$
      00021F 90r00r0B         [24]  973 	mov	dptr,#_segmentBitSwap_ret_65536_67
      000222 E0               [24]  974 	movx	a,@dptr
      000223 43 E0 02         [24]  975 	orl	acc,#0x02
      000226 F0               [24]  976 	movx	@dptr,a
      000227                        977 00110$:
                                    978 ;	board/zbs_segmented_uk/../sem9010.c:166: if (val & 0x40) ret |= (1 << 2);
      000227 90r00r0A         [24]  979 	mov	dptr,#_segmentBitSwap_val_65536_66
      00022A E0               [24]  980 	movx	a,@dptr
      00022B 30 E6 08         [24]  981 	jnb	acc.6,00112$
      00022E 90r00r0B         [24]  982 	mov	dptr,#_segmentBitSwap_ret_65536_67
      000231 E0               [24]  983 	movx	a,@dptr
      000232 43 E0 04         [24]  984 	orl	acc,#0x04
      000235 F0               [24]  985 	movx	@dptr,a
      000236                        986 00112$:
                                    987 ;	board/zbs_segmented_uk/../sem9010.c:167: if (val & 0x80) ret |= (1 << 4);
      000236 90r00r0A         [24]  988 	mov	dptr,#_segmentBitSwap_val_65536_66
      000239 E0               [24]  989 	movx	a,@dptr
      00023A 30 E7 08         [24]  990 	jnb	acc.7,00114$
      00023D 90r00r0B         [24]  991 	mov	dptr,#_segmentBitSwap_ret_65536_67
      000240 E0               [24]  992 	movx	a,@dptr
      000241 43 E0 10         [24]  993 	orl	acc,#0x10
      000244 F0               [24]  994 	movx	@dptr,a
      000245                        995 00114$:
                                    996 ;	board/zbs_segmented_uk/../sem9010.c:168: return ret;
      000245 90r00r0B         [24]  997 	mov	dptr,#_segmentBitSwap_ret_65536_67
      000248 E0               [24]  998 	movx	a,@dptr
                                    999 ;	board/zbs_segmented_uk/../sem9010.c:169: }
      000249 F5 82            [12] 1000 	mov	dpl,a
      00024B 22               [24] 1001 	ret
                                   1002 ;------------------------------------------------------------
                                   1003 ;Allocation info for local variables in function 'writeDigitToBuffer'
                                   1004 ;------------------------------------------------------------
                                   1005 ;c                         Allocated with name '_writeDigitToBuffer_PARM_2'
                                   1006 ;pos                       Allocated with name '_writeDigitToBuffer_pos_65536_68'
                                   1007 ;------------------------------------------------------------
                                   1008 ;	board/zbs_segmented_uk/../sem9010.c:170: static void writeDigitToBuffer(uint8_t pos, uint8_t c) {
                                   1009 ;	-----------------------------------------
                                   1010 ;	 function writeDigitToBuffer
                                   1011 ;	-----------------------------------------
      00024C                       1012 _writeDigitToBuffer:
      00024C E5 82            [12] 1013 	mov	a,dpl
      00024E 90r00r0D         [24] 1014 	mov	dptr,#_writeDigitToBuffer_pos_65536_68
                                   1015 ;	board/zbs_segmented_uk/../sem9010.c:171: switch (pos) {
      000251 F0               [24] 1016 	movx	@dptr,a ; Peephole dmitrygr.0005 - SRSLY, WTF?
      000252 FF               [12] 1017 	mov  r7,a
      000253 24 F6            [12] 1018 	add	a,#0xff - 0x09
      000255 50 01            [24] 1019 	jnc	00118$
      000257 22               [24] 1020 	ret
      000258                       1021 00118$:
      000258 EF               [12] 1022 	mov	a,r7
      000259 24 0A            [12] 1023 	add	a,#(00119$-3-.)
      00025B 83               [24] 1024 	movc	a,@a+pc
      00025C F5 82            [12] 1025 	mov	dpl,a
      00025E EF               [12] 1026 	mov	a,r7
      00025F 24 0E            [12] 1027 	add	a,#(00120$-3-.)
      000261 83               [24] 1028 	movc	a,@a+pc
      000262 F5 83            [12] 1029 	mov	dph,a
      000264 E4               [12] 1030 	clr	a
      000265 73               [24] 1031 	jmp	@a+dptr
      000266                       1032 00119$:
      000266r7A                    1033 	.db	00105$
      000267r7A                    1034 	.db	00105$
      000268rB2                    1035 	.db	00106$
      000269rD5                    1036 	.db	00107$
      00026Ar7A                    1037 	.db	00105$
      00026Br7A                    1038 	.db	00105$
      00026Cr7A                    1039 	.db	00105$
      00026DrF8                    1040 	.db	00108$
      00026Er1B                    1041 	.db	00109$
      00026Fr3E                    1042 	.db	00110$
      000270                       1043 00120$:
      000270s02                    1044 	.db	00105$>>8
      000271s02                    1045 	.db	00105$>>8
      000272s02                    1046 	.db	00106$>>8
      000273s02                    1047 	.db	00107$>>8
      000274s02                    1048 	.db	00105$>>8
      000275s02                    1049 	.db	00105$>>8
      000276s02                    1050 	.db	00105$>>8
      000277s02                    1051 	.db	00108$>>8
      000278s03                    1052 	.db	00109$>>8
      000279s03                    1053 	.db	00110$>>8
                                   1054 ;	board/zbs_segmented_uk/../sem9010.c:176: case 6:
      00027A                       1055 00105$:
                                   1056 ;	board/zbs_segmented_uk/../sem9010.c:177: epdSegmentData[pos] &= 0x01;
      00027A EF               [12] 1057 	mov	a,r7
      00027B 24r10            [12] 1058 	add	a,#_epdSegmentData
      00027D FF               [12] 1059 	mov	r7,a
      00027E E4               [12] 1060 	clr	a
      00027F 34s00            [12] 1061 	addc	a,#(_epdSegmentData >> 8)
      000281 FE               [12] 1062 	mov	r6,a
      000282 8F 82            [24] 1063 	mov	dpl,r7
      000284 8E 83            [24] 1064 	mov	dph,r6
      000286 E0               [24] 1065 	movx	a,@dptr
      000287 FD               [12] 1066 	mov	r5,a
      000288 53 05 01         [24] 1067 	anl	ar5,#0x01
      00028B 8F 82            [24] 1068 	mov	dpl,r7
      00028D 8E 83            [24] 1069 	mov	dph,r6
      00028F ED               [12] 1070 	mov	a,r5
      000290 F0               [24] 1071 	movx	@dptr,a
                                   1072 ;	board/zbs_segmented_uk/../sem9010.c:178: epdSegmentData[pos] |= charDecode(c);
      000291 90r00r0C         [24] 1073 	mov	dptr,#_writeDigitToBuffer_PARM_2
      000294 E0               [24] 1074 	movx	a,@dptr
      000295 F5 82            [12] 1075 	mov	dpl,a
      000297 C0 07            [24] 1076 	push	ar7
      000299 C0 06            [24] 1077 	push	ar6
      00029B C0 05            [24] 1078 	push	ar5
      00029D 12r00rF5         [24] 1079 	lcall	_charDecode
      0002A0 AC 82            [24] 1080 	mov	r4,dpl
      0002A2 D0 05            [24] 1081 	pop	ar5
      0002A4 D0 06            [24] 1082 	pop	ar6
      0002A6 D0 07            [24] 1083 	pop	ar7
      0002A8 EC               [12] 1084 	mov	a,r4
      0002A9 42 05            [12] 1085 	orl	ar5,a
      0002AB 8F 82            [24] 1086 	mov	dpl,r7
      0002AD 8E 83            [24] 1087 	mov	dph,r6
      0002AF ED               [12] 1088 	mov	a,r5
      0002B0 F0               [24] 1089 	movx	@dptr,a
                                   1090 ;	board/zbs_segmented_uk/../sem9010.c:179: break;
      0002B1 22               [24] 1091 	ret
                                   1092 ;	board/zbs_segmented_uk/../sem9010.c:180: case 2:
      0002B2                       1093 00106$:
                                   1094 ;	board/zbs_segmented_uk/../sem9010.c:181: epdSegmentData[3] &= 0x01;
      0002B2 90r00r13         [24] 1095 	mov	dptr,#(_epdSegmentData + 0x0003)
      0002B5 E0               [24] 1096 	movx	a,@dptr
      0002B6 54 01            [12] 1097 	anl	a,#0x01
      0002B8 FF               [12] 1098 	mov	r7,a
      0002B9 F0               [24] 1099 	movx	@dptr,a
                                   1100 ;	board/zbs_segmented_uk/../sem9010.c:182: epdSegmentData[3] |= segmentBitSwap(charDecode(c));
      0002BA 90r00r0C         [24] 1101 	mov	dptr,#_writeDigitToBuffer_PARM_2
      0002BD E0               [24] 1102 	movx	a,@dptr
      0002BE F5 82            [12] 1103 	mov	dpl,a
      0002C0 C0 07            [24] 1104 	push	ar7
      0002C2 12r00rF5         [24] 1105 	lcall	_charDecode
      0002C5 12r01rD3         [24] 1106 	lcall	_segmentBitSwap
      0002C8 AE 82            [24] 1107 	mov	r6,dpl
      0002CA D0 07            [24] 1108 	pop	ar7
      0002CC EE               [12] 1109 	mov	a,r6
      0002CD 42 07            [12] 1110 	orl	ar7,a
      0002CF 90r00r13         [24] 1111 	mov	dptr,#(_epdSegmentData + 0x0003)
      0002D2 EF               [12] 1112 	mov	a,r7
      0002D3 F0               [24] 1113 	movx	@dptr,a
                                   1114 ;	board/zbs_segmented_uk/../sem9010.c:183: break;
      0002D4 22               [24] 1115 	ret
                                   1116 ;	board/zbs_segmented_uk/../sem9010.c:184: case 3:
      0002D5                       1117 00107$:
                                   1118 ;	board/zbs_segmented_uk/../sem9010.c:185: epdSegmentData[2] &= 0x01;
      0002D5 90r00r12         [24] 1119 	mov	dptr,#(_epdSegmentData + 0x0002)
      0002D8 E0               [24] 1120 	movx	a,@dptr
      0002D9 54 01            [12] 1121 	anl	a,#0x01
      0002DB FF               [12] 1122 	mov	r7,a
      0002DC F0               [24] 1123 	movx	@dptr,a
                                   1124 ;	board/zbs_segmented_uk/../sem9010.c:186: epdSegmentData[2] |= segmentBitSwap(charDecode(c));
      0002DD 90r00r0C         [24] 1125 	mov	dptr,#_writeDigitToBuffer_PARM_2
      0002E0 E0               [24] 1126 	movx	a,@dptr
      0002E1 F5 82            [12] 1127 	mov	dpl,a
      0002E3 C0 07            [24] 1128 	push	ar7
      0002E5 12r00rF5         [24] 1129 	lcall	_charDecode
      0002E8 12r01rD3         [24] 1130 	lcall	_segmentBitSwap
      0002EB AE 82            [24] 1131 	mov	r6,dpl
      0002ED D0 07            [24] 1132 	pop	ar7
      0002EF EE               [12] 1133 	mov	a,r6
      0002F0 42 07            [12] 1134 	orl	ar7,a
      0002F2 90r00r12         [24] 1135 	mov	dptr,#(_epdSegmentData + 0x0002)
      0002F5 EF               [12] 1136 	mov	a,r7
      0002F6 F0               [24] 1137 	movx	@dptr,a
                                   1138 ;	board/zbs_segmented_uk/../sem9010.c:187: break;
      0002F7 22               [24] 1139 	ret
                                   1140 ;	board/zbs_segmented_uk/../sem9010.c:188: case 7:
      0002F8                       1141 00108$:
                                   1142 ;	board/zbs_segmented_uk/../sem9010.c:189: epdSegmentData[9] &= 0x01;
      0002F8 90r00r19         [24] 1143 	mov	dptr,#(_epdSegmentData + 0x0009)
      0002FB E0               [24] 1144 	movx	a,@dptr
      0002FC 54 01            [12] 1145 	anl	a,#0x01
      0002FE FF               [12] 1146 	mov	r7,a
      0002FF F0               [24] 1147 	movx	@dptr,a
                                   1148 ;	board/zbs_segmented_uk/../sem9010.c:190: epdSegmentData[9] |= segmentBitSwap(charDecode(c));
      000300 90r00r0C         [24] 1149 	mov	dptr,#_writeDigitToBuffer_PARM_2
      000303 E0               [24] 1150 	movx	a,@dptr
      000304 F5 82            [12] 1151 	mov	dpl,a
      000306 C0 07            [24] 1152 	push	ar7
      000308 12r00rF5         [24] 1153 	lcall	_charDecode
      00030B 12r01rD3         [24] 1154 	lcall	_segmentBitSwap
      00030E AE 82            [24] 1155 	mov	r6,dpl
      000310 D0 07            [24] 1156 	pop	ar7
      000312 EE               [12] 1157 	mov	a,r6
      000313 42 07            [12] 1158 	orl	ar7,a
      000315 90r00r19         [24] 1159 	mov	dptr,#(_epdSegmentData + 0x0009)
      000318 EF               [12] 1160 	mov	a,r7
      000319 F0               [24] 1161 	movx	@dptr,a
                                   1162 ;	board/zbs_segmented_uk/../sem9010.c:191: break;
                                   1163 ;	board/zbs_segmented_uk/../sem9010.c:192: case 8:
      00031A 22               [24] 1164 	ret
      00031B                       1165 00109$:
                                   1166 ;	board/zbs_segmented_uk/../sem9010.c:193: epdSegmentData[8] &= 0x01;
      00031B 90r00r18         [24] 1167 	mov	dptr,#(_epdSegmentData + 0x0008)
      00031E E0               [24] 1168 	movx	a,@dptr
      00031F 54 01            [12] 1169 	anl	a,#0x01
      000321 FF               [12] 1170 	mov	r7,a
      000322 F0               [24] 1171 	movx	@dptr,a
                                   1172 ;	board/zbs_segmented_uk/../sem9010.c:194: epdSegmentData[8] |= segmentBitSwap(charDecode(c));
      000323 90r00r0C         [24] 1173 	mov	dptr,#_writeDigitToBuffer_PARM_2
      000326 E0               [24] 1174 	movx	a,@dptr
      000327 F5 82            [12] 1175 	mov	dpl,a
      000329 C0 07            [24] 1176 	push	ar7
      00032B 12r00rF5         [24] 1177 	lcall	_charDecode
      00032E 12r01rD3         [24] 1178 	lcall	_segmentBitSwap
      000331 AE 82            [24] 1179 	mov	r6,dpl
      000333 D0 07            [24] 1180 	pop	ar7
      000335 EE               [12] 1181 	mov	a,r6
      000336 42 07            [12] 1182 	orl	ar7,a
      000338 90r00r18         [24] 1183 	mov	dptr,#(_epdSegmentData + 0x0008)
      00033B EF               [12] 1184 	mov	a,r7
      00033C F0               [24] 1185 	movx	@dptr,a
                                   1186 ;	board/zbs_segmented_uk/../sem9010.c:195: break;
                                   1187 ;	board/zbs_segmented_uk/../sem9010.c:196: case 9:
      00033D 22               [24] 1188 	ret
      00033E                       1189 00110$:
                                   1190 ;	board/zbs_segmented_uk/../sem9010.c:197: epdSegmentData[7] &= 0x01;
      00033E 90r00r17         [24] 1191 	mov	dptr,#(_epdSegmentData + 0x0007)
      000341 E0               [24] 1192 	movx	a,@dptr
      000342 54 01            [12] 1193 	anl	a,#0x01
      000344 FF               [12] 1194 	mov	r7,a
      000345 F0               [24] 1195 	movx	@dptr,a
                                   1196 ;	board/zbs_segmented_uk/../sem9010.c:198: epdSegmentData[7] |= segmentBitSwap(charDecode(c));
      000346 90r00r0C         [24] 1197 	mov	dptr,#_writeDigitToBuffer_PARM_2
      000349 E0               [24] 1198 	movx	a,@dptr
      00034A F5 82            [12] 1199 	mov	dpl,a
      00034C C0 07            [24] 1200 	push	ar7
      00034E 12r00rF5         [24] 1201 	lcall	_charDecode
      000351 12r01rD3         [24] 1202 	lcall	_segmentBitSwap
      000354 AE 82            [24] 1203 	mov	r6,dpl
      000356 D0 07            [24] 1204 	pop	ar7
      000358 EE               [12] 1205 	mov	a,r6
      000359 42 07            [12] 1206 	orl	ar7,a
      00035B 90r00r17         [24] 1207 	mov	dptr,#(_epdSegmentData + 0x0007)
      00035E EF               [12] 1208 	mov	a,r7
      00035F F0               [24] 1209 	movx	@dptr,a
                                   1210 ;	board/zbs_segmented_uk/../sem9010.c:200: }
                                   1211 ;	board/zbs_segmented_uk/../sem9010.c:201: }
      000360 22               [24] 1212 	ret
                                   1213 ;------------------------------------------------------------
                                   1214 ;Allocation info for local variables in function 'iconSet'
                                   1215 ;------------------------------------------------------------
                                   1216 ;bit                       Allocated with name '_iconSet_PARM_2'
                                   1217 ;on                        Allocated with name '_iconSet_PARM_3'
                                   1218 ;byte                      Allocated with name '_iconSet_byte_65536_71'
                                   1219 ;------------------------------------------------------------
                                   1220 ;	board/zbs_segmented_uk/../sem9010.c:202: static void iconSet(uint8_t byte, uint8_t bit, bool on) {
                                   1221 ;	-----------------------------------------
                                   1222 ;	 function iconSet
                                   1223 ;	-----------------------------------------
      000361                       1224 _iconSet:
      000361 E5 82            [12] 1225 	mov	a,dpl
      000363 90r00r10         [24] 1226 	mov	dptr,#_iconSet_byte_65536_71
      000366 F0               [24] 1227 	movx	@dptr,a
                                   1228 ;	board/zbs_segmented_uk/../sem9010.c:203: if (on) {
      000367 90r00r0F         [24] 1229 	mov	dptr,#_iconSet_PARM_3
      00036A E0               [24] 1230 	movx	a,@dptr
      00036B 60 2C            [24] 1231 	jz	00102$
                                   1232 ;	board/zbs_segmented_uk/../sem9010.c:204: epdSegmentData[byte] |= (1 << bit);
      00036D 90r00r10         [24] 1233 	mov	dptr,#_iconSet_byte_65536_71
      000370 E0               [24] 1234 	movx	a,@dptr
      000371 24r10            [12] 1235 	add	a,#_epdSegmentData
      000373 FF               [12] 1236 	mov	r7,a
      000374 E4               [12] 1237 	clr	a
      000375 34s00            [12] 1238 	addc	a,#(_epdSegmentData >> 8)
      000377 FE               [12] 1239 	mov	r6,a
      000378 8F 82            [24] 1240 	mov	dpl,r7
      00037A 8E 83            [24] 1241 	mov	dph,r6
      00037C E0               [24] 1242 	movx	a,@dptr
      00037D FD               [12] 1243 	mov	r5,a
      00037E 90r00r0E         [24] 1244 	mov	dptr,#_iconSet_PARM_2
      000381 E0               [24] 1245 	movx	a,@dptr
      000382 FC               [12] 1246 	mov	r4,a
      000383 8C F0            [24] 1247 	mov	b,r4
      000385 05 F0            [12] 1248 	inc	b
      000387 74 01            [12] 1249 	mov	a,#0x01
      000389 80 02            [24] 1250 	sjmp	00113$
      00038B                       1251 00111$:
      00038B 25 E0            [12] 1252 	add	a,acc
      00038D                       1253 00113$:
      00038D D5 F0 FB         [24] 1254 	djnz	b,00111$
      000390 42 05            [12] 1255 	orl	ar5,a
      000392 8F 82            [24] 1256 	mov	dpl,r7
      000394 8E 83            [24] 1257 	mov	dph,r6
      000396 ED               [12] 1258 	mov	a,r5
      000397 F0               [24] 1259 	movx	@dptr,a
      000398 22               [24] 1260 	ret
      000399                       1261 00102$:
                                   1262 ;	board/zbs_segmented_uk/../sem9010.c:206: epdSegmentData[byte] &= ~(1 << bit);
      000399 90r00r10         [24] 1263 	mov	dptr,#_iconSet_byte_65536_71
      00039C E0               [24] 1264 	movx	a,@dptr
      00039D 24r10            [12] 1265 	add	a,#_epdSegmentData
      00039F FF               [12] 1266 	mov	r7,a
      0003A0 E4               [12] 1267 	clr	a
      0003A1 34s00            [12] 1268 	addc	a,#(_epdSegmentData >> 8)
      0003A3 FE               [12] 1269 	mov	r6,a
      0003A4 8F 82            [24] 1270 	mov	dpl,r7
      0003A6 8E 83            [24] 1271 	mov	dph,r6
      0003A8 E0               [24] 1272 	movx	a,@dptr
      0003A9 FD               [12] 1273 	mov	r5,a
      0003AA 90r00r0E         [24] 1274 	mov	dptr,#_iconSet_PARM_2
      0003AD E0               [24] 1275 	movx	a,@dptr
      0003AE FC               [12] 1276 	mov	r4,a
      0003AF 8C F0            [24] 1277 	mov	b,r4
      0003B1 05 F0            [12] 1278 	inc	b
      0003B3 74 01            [12] 1279 	mov	a,#0x01
      0003B5 80 02            [24] 1280 	sjmp	00116$
      0003B7                       1281 00114$:
      0003B7 25 E0            [12] 1282 	add	a,acc
      0003B9                       1283 00116$:
      0003B9 D5 F0 FB         [24] 1284 	djnz	b,00114$
      0003BC F4               [12] 1285 	cpl	a
      0003BD 52 05            [12] 1286 	anl	ar5,a
      0003BF 8F 82            [24] 1287 	mov	dpl,r7
      0003C1 8E 83            [24] 1288 	mov	dph,r6
      0003C3 ED               [12] 1289 	mov	a,r5
      0003C4 F0               [24] 1290 	movx	@dptr,a
                                   1291 ;	board/zbs_segmented_uk/../sem9010.c:208: }
      0003C5 22               [24] 1292 	ret
                                   1293 ;------------------------------------------------------------
                                   1294 ;Allocation info for local variables in function 'setEPDIcon'
                                   1295 ;------------------------------------------------------------
                                   1296 ;on                        Allocated with name '_setEPDIcon_PARM_2'
                                   1297 ;iconvalue                 Allocated with name '_setEPDIcon_iconvalue_65536_75'
                                   1298 ;------------------------------------------------------------
                                   1299 ;	board/zbs_segmented_uk/../sem9010.c:210: void setEPDIcon(uint16_t iconvalue, bool on) {
                                   1300 ;	-----------------------------------------
                                   1301 ;	 function setEPDIcon
                                   1302 ;	-----------------------------------------
      0003C6                       1303 _setEPDIcon:
      0003C6 AF 83            [24] 1304 	mov	r7,dph
      0003C8 E5 82            [12] 1305 	mov	a,dpl
      0003CA 90r00r12         [24] 1306 	mov	dptr,#_setEPDIcon_iconvalue_65536_75
      0003CD F0               [24] 1307 	movx	@dptr,a
      0003CE EF               [12] 1308 	mov	a,r7
      0003CF A3               [24] 1309 	inc	dptr
      0003D0 F0               [24] 1310 	movx	@dptr,a
                                   1311 ;	board/zbs_segmented_uk/../sem9010.c:211: if (iconvalue & EPD_SIGN_POUND_LARGE)
      0003D1 90r00r12         [24] 1312 	mov	dptr,#_setEPDIcon_iconvalue_65536_75
      0003D4 E0               [24] 1313 	movx	a,@dptr
      0003D5 FE               [12] 1314 	mov	r6,a
      0003D6 A3               [24] 1315 	inc	dptr
      0003D7 E0               [24] 1316 	movx	a,@dptr
      0003D8 EE               [12] 1317 	mov	a,r6
      0003D9 30 E0 15         [24] 1318 	jnb	acc.0,00102$
                                   1319 ;	board/zbs_segmented_uk/../sem9010.c:212: iconSet(2, 0, on);
      0003DC 90r00r11         [24] 1320 	mov	dptr,#_setEPDIcon_PARM_2
      0003DF E0               [24] 1321 	movx	a,@dptr
      0003E0 FF               [12] 1322 	mov	r7,a
      0003E1 90r00r0E         [24] 1323 	mov	dptr,#_iconSet_PARM_2
      0003E4 E4               [12] 1324 	clr	a
      0003E5 F0               [24] 1325 	movx	@dptr,a
      0003E6 90r00r0F         [24] 1326 	mov	dptr,#_iconSet_PARM_3
      0003E9 EF               [12] 1327 	mov	a,r7
      0003EA F0               [24] 1328 	movx	@dptr,a
      0003EB 75 82 02         [24] 1329 	mov	dpl,#0x02
      0003EE 12r03r61         [24] 1330 	lcall	_iconSet
      0003F1                       1331 00102$:
                                   1332 ;	board/zbs_segmented_uk/../sem9010.c:213: if (iconvalue & EPD_DIGIT_ONE_LARGE)
      0003F1 90r00r12         [24] 1333 	mov	dptr,#_setEPDIcon_iconvalue_65536_75
      0003F4 E0               [24] 1334 	movx	a,@dptr
      0003F5 FE               [12] 1335 	mov	r6,a
      0003F6 A3               [24] 1336 	inc	dptr
      0003F7 E0               [24] 1337 	movx	a,@dptr
      0003F8 EE               [12] 1338 	mov	a,r6
      0003F9 30 E1 15         [24] 1339 	jnb	acc.1,00104$
                                   1340 ;	board/zbs_segmented_uk/../sem9010.c:214: iconSet(1, 0, on);
      0003FC 90r00r11         [24] 1341 	mov	dptr,#_setEPDIcon_PARM_2
      0003FF E0               [24] 1342 	movx	a,@dptr
      000400 FF               [12] 1343 	mov	r7,a
      000401 90r00r0E         [24] 1344 	mov	dptr,#_iconSet_PARM_2
      000404 E4               [12] 1345 	clr	a
      000405 F0               [24] 1346 	movx	@dptr,a
      000406 90r00r0F         [24] 1347 	mov	dptr,#_iconSet_PARM_3
      000409 EF               [12] 1348 	mov	a,r7
      00040A F0               [24] 1349 	movx	@dptr,a
      00040B 75 82 01         [24] 1350 	mov	dpl,#0x01
      00040E 12r03r61         [24] 1351 	lcall	_iconSet
      000411                       1352 00104$:
                                   1353 ;	board/zbs_segmented_uk/../sem9010.c:215: if (iconvalue & EPD_PERIOD_LARGE)
      000411 90r00r12         [24] 1354 	mov	dptr,#_setEPDIcon_iconvalue_65536_75
      000414 E0               [24] 1355 	movx	a,@dptr
      000415 FE               [12] 1356 	mov	r6,a
      000416 A3               [24] 1357 	inc	dptr
      000417 E0               [24] 1358 	movx	a,@dptr
      000418 EE               [12] 1359 	mov	a,r6
      000419 30 E2 15         [24] 1360 	jnb	acc.2,00106$
                                   1361 ;	board/zbs_segmented_uk/../sem9010.c:216: iconSet(3, 0, on);
      00041C 90r00r11         [24] 1362 	mov	dptr,#_setEPDIcon_PARM_2
      00041F E0               [24] 1363 	movx	a,@dptr
      000420 FF               [12] 1364 	mov	r7,a
      000421 90r00r0E         [24] 1365 	mov	dptr,#_iconSet_PARM_2
      000424 E4               [12] 1366 	clr	a
      000425 F0               [24] 1367 	movx	@dptr,a
      000426 90r00r0F         [24] 1368 	mov	dptr,#_iconSet_PARM_3
      000429 EF               [12] 1369 	mov	a,r7
      00042A F0               [24] 1370 	movx	@dptr,a
      00042B 75 82 03         [24] 1371 	mov	dpl,#0x03
      00042E 12r03r61         [24] 1372 	lcall	_iconSet
      000431                       1373 00106$:
                                   1374 ;	board/zbs_segmented_uk/../sem9010.c:217: if (iconvalue & EPD_SIGN_PENCE_LARGE)
      000431 90r00r12         [24] 1375 	mov	dptr,#_setEPDIcon_iconvalue_65536_75
      000434 E0               [24] 1376 	movx	a,@dptr
      000435 FE               [12] 1377 	mov	r6,a
      000436 A3               [24] 1378 	inc	dptr
      000437 E0               [24] 1379 	movx	a,@dptr
      000438 EE               [12] 1380 	mov	a,r6
      000439 30 E3 15         [24] 1381 	jnb	acc.3,00108$
                                   1382 ;	board/zbs_segmented_uk/../sem9010.c:218: iconSet(4, 0, on);
      00043C 90r00r11         [24] 1383 	mov	dptr,#_setEPDIcon_PARM_2
      00043F E0               [24] 1384 	movx	a,@dptr
      000440 FF               [12] 1385 	mov	r7,a
      000441 90r00r0E         [24] 1386 	mov	dptr,#_iconSet_PARM_2
      000444 E4               [12] 1387 	clr	a
      000445 F0               [24] 1388 	movx	@dptr,a
      000446 90r00r0F         [24] 1389 	mov	dptr,#_iconSet_PARM_3
      000449 EF               [12] 1390 	mov	a,r7
      00044A F0               [24] 1391 	movx	@dptr,a
      00044B 75 82 04         [24] 1392 	mov	dpl,#0x04
      00044E 12r03r61         [24] 1393 	lcall	_iconSet
      000451                       1394 00108$:
                                   1395 ;	board/zbs_segmented_uk/../sem9010.c:219: if (iconvalue & EPD_BG_COLOR)
      000451 90r00r12         [24] 1396 	mov	dptr,#_setEPDIcon_iconvalue_65536_75
      000454 E0               [24] 1397 	movx	a,@dptr
      000455 A3               [24] 1398 	inc	dptr
      000456 E0               [24] 1399 	movx	a,@dptr
      000457 30 E0 15         [24] 1400 	jnb	acc.0,00110$
                                   1401 ;	board/zbs_segmented_uk/../sem9010.c:220: iconSet(0, 0, on);
      00045A 90r00r11         [24] 1402 	mov	dptr,#_setEPDIcon_PARM_2
      00045D E0               [24] 1403 	movx	a,@dptr
      00045E FF               [12] 1404 	mov	r7,a
      00045F 90r00r0E         [24] 1405 	mov	dptr,#_iconSet_PARM_2
      000462 E4               [12] 1406 	clr	a
      000463 F0               [24] 1407 	movx	@dptr,a
      000464 90r00r0F         [24] 1408 	mov	dptr,#_iconSet_PARM_3
      000467 EF               [12] 1409 	mov	a,r7
      000468 F0               [24] 1410 	movx	@dptr,a
      000469 75 82 00         [24] 1411 	mov	dpl,#0x00
      00046C 12r03r61         [24] 1412 	lcall	_iconSet
      00046F                       1413 00110$:
                                   1414 ;	board/zbs_segmented_uk/../sem9010.c:221: if (iconvalue & EPD_SIGN_POUND_SMALL)
      00046F 90r00r12         [24] 1415 	mov	dptr,#_setEPDIcon_iconvalue_65536_75
      000472 E0               [24] 1416 	movx	a,@dptr
      000473 FE               [12] 1417 	mov	r6,a
      000474 A3               [24] 1418 	inc	dptr
      000475 E0               [24] 1419 	movx	a,@dptr
      000476 EE               [12] 1420 	mov	a,r6
      000477 30 E4 15         [24] 1421 	jnb	acc.4,00112$
                                   1422 ;	board/zbs_segmented_uk/../sem9010.c:222: iconSet(6, 0, on);
      00047A 90r00r11         [24] 1423 	mov	dptr,#_setEPDIcon_PARM_2
      00047D E0               [24] 1424 	movx	a,@dptr
      00047E FF               [12] 1425 	mov	r7,a
      00047F 90r00r0E         [24] 1426 	mov	dptr,#_iconSet_PARM_2
      000482 E4               [12] 1427 	clr	a
      000483 F0               [24] 1428 	movx	@dptr,a
      000484 90r00r0F         [24] 1429 	mov	dptr,#_iconSet_PARM_3
      000487 EF               [12] 1430 	mov	a,r7
      000488 F0               [24] 1431 	movx	@dptr,a
      000489 75 82 06         [24] 1432 	mov	dpl,#0x06
      00048C 12r03r61         [24] 1433 	lcall	_iconSet
      00048F                       1434 00112$:
                                   1435 ;	board/zbs_segmented_uk/../sem9010.c:223: if (iconvalue & EPD_DIGIT_ONE_SMALL)
      00048F 90r00r12         [24] 1436 	mov	dptr,#_setEPDIcon_iconvalue_65536_75
      000492 E0               [24] 1437 	movx	a,@dptr
      000493 FE               [12] 1438 	mov	r6,a
      000494 A3               [24] 1439 	inc	dptr
      000495 E0               [24] 1440 	movx	a,@dptr
      000496 EE               [12] 1441 	mov	a,r6
      000497 30 E5 15         [24] 1442 	jnb	acc.5,00114$
                                   1443 ;	board/zbs_segmented_uk/../sem9010.c:224: iconSet(7, 0, on);
      00049A 90r00r11         [24] 1444 	mov	dptr,#_setEPDIcon_PARM_2
      00049D E0               [24] 1445 	movx	a,@dptr
      00049E FF               [12] 1446 	mov	r7,a
      00049F 90r00r0E         [24] 1447 	mov	dptr,#_iconSet_PARM_2
      0004A2 E4               [12] 1448 	clr	a
      0004A3 F0               [24] 1449 	movx	@dptr,a
      0004A4 90r00r0F         [24] 1450 	mov	dptr,#_iconSet_PARM_3
      0004A7 EF               [12] 1451 	mov	a,r7
      0004A8 F0               [24] 1452 	movx	@dptr,a
      0004A9 75 82 07         [24] 1453 	mov	dpl,#0x07
      0004AC 12r03r61         [24] 1454 	lcall	_iconSet
      0004AF                       1455 00114$:
                                   1456 ;	board/zbs_segmented_uk/../sem9010.c:225: if (iconvalue & EPD_PERIOD_SMALL)
      0004AF 90r00r12         [24] 1457 	mov	dptr,#_setEPDIcon_iconvalue_65536_75
      0004B2 E0               [24] 1458 	movx	a,@dptr
      0004B3 FE               [12] 1459 	mov	r6,a
      0004B4 A3               [24] 1460 	inc	dptr
      0004B5 E0               [24] 1461 	movx	a,@dptr
      0004B6 EE               [12] 1462 	mov	a,r6
      0004B7 30 E6 15         [24] 1463 	jnb	acc.6,00116$
                                   1464 ;	board/zbs_segmented_uk/../sem9010.c:226: iconSet(9, 0, on);
      0004BA 90r00r11         [24] 1465 	mov	dptr,#_setEPDIcon_PARM_2
      0004BD E0               [24] 1466 	movx	a,@dptr
      0004BE FF               [12] 1467 	mov	r7,a
      0004BF 90r00r0E         [24] 1468 	mov	dptr,#_iconSet_PARM_2
      0004C2 E4               [12] 1469 	clr	a
      0004C3 F0               [24] 1470 	movx	@dptr,a
      0004C4 90r00r0F         [24] 1471 	mov	dptr,#_iconSet_PARM_3
      0004C7 EF               [12] 1472 	mov	a,r7
      0004C8 F0               [24] 1473 	movx	@dptr,a
      0004C9 75 82 09         [24] 1474 	mov	dpl,#0x09
      0004CC 12r03r61         [24] 1475 	lcall	_iconSet
      0004CF                       1476 00116$:
                                   1477 ;	board/zbs_segmented_uk/../sem9010.c:227: if (iconvalue & EPD_SIGN_PENCE_SMALL)
      0004CF 90r00r12         [24] 1478 	mov	dptr,#_setEPDIcon_iconvalue_65536_75
      0004D2 E0               [24] 1479 	movx	a,@dptr
      0004D3 FE               [12] 1480 	mov	r6,a
      0004D4 A3               [24] 1481 	inc	dptr
      0004D5 E0               [24] 1482 	movx	a,@dptr
      0004D6 EE               [12] 1483 	mov	a,r6
      0004D7 30 E7 15         [24] 1484 	jnb	acc.7,00118$
                                   1485 ;	board/zbs_segmented_uk/../sem9010.c:228: iconSet(8, 0, on);
      0004DA 90r00r11         [24] 1486 	mov	dptr,#_setEPDIcon_PARM_2
      0004DD E0               [24] 1487 	movx	a,@dptr
      0004DE FF               [12] 1488 	mov	r7,a
      0004DF 90r00r0E         [24] 1489 	mov	dptr,#_iconSet_PARM_2
      0004E2 E4               [12] 1490 	clr	a
      0004E3 F0               [24] 1491 	movx	@dptr,a
      0004E4 90r00r0F         [24] 1492 	mov	dptr,#_iconSet_PARM_3
      0004E7 EF               [12] 1493 	mov	a,r7
      0004E8 F0               [24] 1494 	movx	@dptr,a
      0004E9 75 82 08         [24] 1495 	mov	dpl,#0x08
      0004EC 12r03r61         [24] 1496 	lcall	_iconSet
      0004EF                       1497 00118$:
                                   1498 ;	board/zbs_segmented_uk/../sem9010.c:229: if (iconvalue & EPD_ICON_DIAMOND)
      0004EF 90r00r12         [24] 1499 	mov	dptr,#_setEPDIcon_iconvalue_65536_75
      0004F2 E0               [24] 1500 	movx	a,@dptr
      0004F3 A3               [24] 1501 	inc	dptr
      0004F4 E0               [24] 1502 	movx	a,@dptr
      0004F5 30 E1 15         [24] 1503 	jnb	acc.1,00120$
                                   1504 ;	board/zbs_segmented_uk/../sem9010.c:230: iconSet(10, 0, on);
      0004F8 90r00r11         [24] 1505 	mov	dptr,#_setEPDIcon_PARM_2
      0004FB E0               [24] 1506 	movx	a,@dptr
      0004FC FF               [12] 1507 	mov	r7,a
      0004FD 90r00r0E         [24] 1508 	mov	dptr,#_iconSet_PARM_2
      000500 E4               [12] 1509 	clr	a
      000501 F0               [24] 1510 	movx	@dptr,a
      000502 90r00r0F         [24] 1511 	mov	dptr,#_iconSet_PARM_3
      000505 EF               [12] 1512 	mov	a,r7
      000506 F0               [24] 1513 	movx	@dptr,a
      000507 75 82 0A         [24] 1514 	mov	dpl,#0x0a
      00050A 12r03r61         [24] 1515 	lcall	_iconSet
      00050D                       1516 00120$:
                                   1517 ;	board/zbs_segmented_uk/../sem9010.c:231: if (iconvalue & EPD_ICON_ARROW)
      00050D 90r00r12         [24] 1518 	mov	dptr,#_setEPDIcon_iconvalue_65536_75
      000510 E0               [24] 1519 	movx	a,@dptr
      000511 A3               [24] 1520 	inc	dptr
      000512 E0               [24] 1521 	movx	a,@dptr
      000513 30 E2 16         [24] 1522 	jnb	acc.2,00122$
                                   1523 ;	board/zbs_segmented_uk/../sem9010.c:232: iconSet(10, 1, on);
      000516 90r00r11         [24] 1524 	mov	dptr,#_setEPDIcon_PARM_2
      000519 E0               [24] 1525 	movx	a,@dptr
      00051A FF               [12] 1526 	mov	r7,a
      00051B 90r00r0E         [24] 1527 	mov	dptr,#_iconSet_PARM_2
      00051E 74 01            [12] 1528 	mov	a,#0x01
      000520 F0               [24] 1529 	movx	@dptr,a
      000521 90r00r0F         [24] 1530 	mov	dptr,#_iconSet_PARM_3
      000524 EF               [12] 1531 	mov	a,r7
      000525 F0               [24] 1532 	movx	@dptr,a
      000526 75 82 0A         [24] 1533 	mov	dpl,#0x0a
      000529 12r03r61         [24] 1534 	lcall	_iconSet
      00052C                       1535 00122$:
                                   1536 ;	board/zbs_segmented_uk/../sem9010.c:233: if (iconvalue & EPD_ICON_STAR)
      00052C 90r00r12         [24] 1537 	mov	dptr,#_setEPDIcon_iconvalue_65536_75
      00052F E0               [24] 1538 	movx	a,@dptr
      000530 A3               [24] 1539 	inc	dptr
      000531 E0               [24] 1540 	movx	a,@dptr
      000532 30 E3 16         [24] 1541 	jnb	acc.3,00124$
                                   1542 ;	board/zbs_segmented_uk/../sem9010.c:234: iconSet(10, 2, on);
      000535 90r00r11         [24] 1543 	mov	dptr,#_setEPDIcon_PARM_2
      000538 E0               [24] 1544 	movx	a,@dptr
      000539 FF               [12] 1545 	mov	r7,a
      00053A 90r00r0E         [24] 1546 	mov	dptr,#_iconSet_PARM_2
      00053D 74 02            [12] 1547 	mov	a,#0x02
      00053F F0               [24] 1548 	movx	@dptr,a
      000540 90r00r0F         [24] 1549 	mov	dptr,#_iconSet_PARM_3
      000543 EF               [12] 1550 	mov	a,r7
      000544 F0               [24] 1551 	movx	@dptr,a
      000545 75 82 0A         [24] 1552 	mov	dpl,#0x0a
      000548 12r03r61         [24] 1553 	lcall	_iconSet
      00054B                       1554 00124$:
                                   1555 ;	board/zbs_segmented_uk/../sem9010.c:235: if (iconvalue & EPD_ICON_CIRCLE)
      00054B 90r00r12         [24] 1556 	mov	dptr,#_setEPDIcon_iconvalue_65536_75
      00054E E0               [24] 1557 	movx	a,@dptr
      00054F A3               [24] 1558 	inc	dptr
      000550 E0               [24] 1559 	movx	a,@dptr
      000551 30 E4 16         [24] 1560 	jnb	acc.4,00126$
                                   1561 ;	board/zbs_segmented_uk/../sem9010.c:236: iconSet(10, 3, on);
      000554 90r00r11         [24] 1562 	mov	dptr,#_setEPDIcon_PARM_2
      000557 E0               [24] 1563 	movx	a,@dptr
      000558 FF               [12] 1564 	mov	r7,a
      000559 90r00r0E         [24] 1565 	mov	dptr,#_iconSet_PARM_2
      00055C 74 03            [12] 1566 	mov	a,#0x03
      00055E F0               [24] 1567 	movx	@dptr,a
      00055F 90r00r0F         [24] 1568 	mov	dptr,#_iconSet_PARM_3
      000562 EF               [12] 1569 	mov	a,r7
      000563 F0               [24] 1570 	movx	@dptr,a
      000564 75 82 0A         [24] 1571 	mov	dpl,#0x0a
      000567 12r03r61         [24] 1572 	lcall	_iconSet
      00056A                       1573 00126$:
                                   1574 ;	board/zbs_segmented_uk/../sem9010.c:237: if (iconvalue & EPD_ICON_SQUARE)
      00056A 90r00r12         [24] 1575 	mov	dptr,#_setEPDIcon_iconvalue_65536_75
      00056D E0               [24] 1576 	movx	a,@dptr
      00056E A3               [24] 1577 	inc	dptr
      00056F E0               [24] 1578 	movx	a,@dptr
      000570 30 E5 16         [24] 1579 	jnb	acc.5,00129$
                                   1580 ;	board/zbs_segmented_uk/../sem9010.c:238: iconSet(10, 4, on);
      000573 90r00r11         [24] 1581 	mov	dptr,#_setEPDIcon_PARM_2
      000576 E0               [24] 1582 	movx	a,@dptr
      000577 FF               [12] 1583 	mov	r7,a
      000578 90r00r0E         [24] 1584 	mov	dptr,#_iconSet_PARM_2
      00057B 74 04            [12] 1585 	mov	a,#0x04
      00057D F0               [24] 1586 	movx	@dptr,a
      00057E 90r00r0F         [24] 1587 	mov	dptr,#_iconSet_PARM_3
      000581 EF               [12] 1588 	mov	a,r7
      000582 F0               [24] 1589 	movx	@dptr,a
      000583 75 82 0A         [24] 1590 	mov	dpl,#0x0a
                                   1591 ;	board/zbs_segmented_uk/../sem9010.c:239: }
      000586 02r03r61         [24] 1592 	ljmp	_iconSet
      000589                       1593 00129$:
      000589 22               [24] 1594 	ret
                                   1595 ;------------------------------------------------------------
                                   1596 ;Allocation info for local variables in function 'epdEnable'
                                   1597 ;------------------------------------------------------------
                                   1598 ;	board/zbs_segmented_uk/../sem9010.c:240: void epdEnable() {
                                   1599 ;	-----------------------------------------
                                   1600 ;	 function epdEnable
                                   1601 ;	-----------------------------------------
      00058A                       1602 _epdEnable:
                                   1603 ;	board/zbs_segmented_uk/../sem9010.c:249: P2FUNC &= ~((1 << 0) | (1 << 1) | (1 << 2));  // disable functions on busy, _cs, power
      00058A 53 AF F8         [24] 1604 	anl	_P2FUNC,#0xf8
                                   1605 ;	board/zbs_segmented_uk/../sem9010.c:250: P2DIR &= ~((1 << 1) | (1 << 2));              // _CS 2.1 and POWER 2.2(output)
      00058D 53 BB F9         [24] 1606 	anl	_P2DIR,#0xf9
                                   1607 ;	board/zbs_segmented_uk/../sem9010.c:251: P2DIR |= (1 << 0);                            // BUSY (input)
      000590 43 BB 01         [24] 1608 	orl	_P2DIR,#0x01
                                   1609 ;	board/zbs_segmented_uk/../sem9010.c:253: P1DIR &= ~((1 << 7) | (1 << 6));  // _RESET and EPD_EXT_CLK as output
      000593 53 BA 3F         [24] 1610 	anl	_P1DIR,#0x3f
                                   1611 ;	board/zbs_segmented_uk/../sem9010.c:254: P1FUNC &= ~(1 << 7);              // disable function on _reset
      000596 53 AE 7F         [24] 1612 	anl	_P1FUNC,#0x7f
                                   1613 ;	board/zbs_segmented_uk/../sem9010.c:255: P1FUNC |= (1 << 6);               // EPD_EXT_CLK-out enable
      000599 43 AE 40         [24] 1614 	orl	_P1FUNC,#0x40
                                   1615 ;	board/zbs_segmented_uk/../sem9010.c:257: P0FUNC |= (1 << 0) | (1 << 1) | (1 << 2);  // enable clk, mosi, miso functions
      00059C 43 AD 07         [24] 1616 	orl	_P0FUNC,#0x07
                                   1617 ;	board/zbs_segmented_uk/../sem9010.c:258: P0DIR &= ~((1 << 0) | (1 << 1));           // enable output on clk, mosi
      00059F 53 B9 FC         [24] 1618 	anl	_P0DIR,#0xfc
                                   1619 ;	board/zbs_segmented_uk/../sem9010.c:259: P0DIR |= (1 << 2);                         // miso as input
      0005A2 43 B9 04         [24] 1620 	orl	_P0DIR,#0x04
                                   1621 ;	board/zbs_segmented_uk/../sem9010.c:260: P0PULL = (1 << 2);                         // pullup on miso
      0005A5 75 BC 04         [24] 1622 	mov	_P0PULL,#0x04
                                   1623 ;	board/zbs_segmented_uk/../sem9010.c:262: spiInit();
                                   1624 ;	board/zbs_segmented_uk/../sem9010.c:263: }
      0005A8 02r00r00         [24] 1625 	ljmp	_spiInit
                                   1626 ;------------------------------------------------------------
                                   1627 ;Allocation info for local variables in function 'epdDisable'
                                   1628 ;------------------------------------------------------------
                                   1629 ;	board/zbs_segmented_uk/../sem9010.c:264: void epdDisable() {
                                   1630 ;	-----------------------------------------
                                   1631 ;	 function epdDisable
                                   1632 ;	-----------------------------------------
      0005AB                       1633 _epdDisable:
                                   1634 ;	board/zbs_segmented_uk/../sem9010.c:265: P1_7 = 0;  // assert reset
                                   1635 ;	assignBit
      0005AB C2 97            [12] 1636 	clr	_P1_7
                                   1637 ;	board/zbs_segmented_uk/../sem9010.c:267: P2_2 = 0;  // power it down
                                   1638 ;	assignBit
      0005AD C2 A2            [12] 1639 	clr	_P2_2
                                   1640 ;	board/zbs_segmented_uk/../sem9010.c:270: P2DIR |= (1 << 1) | (1 << 2);                 // _cs and power as input
      0005AF 43 BB 06         [24] 1641 	orl	_P2DIR,#0x06
                                   1642 ;	board/zbs_segmented_uk/../sem9010.c:271: P1DIR |= (1 << 7) | (1 << 6);                 // reset and epd-ext-clk as input
      0005B2 43 BA C0         [24] 1643 	orl	_P1DIR,#0xc0
                                   1644 ;	board/zbs_segmented_uk/../sem9010.c:272: P0DIR |= (1 << 0) | (1 << 1);                 // mosi/clk as input
      0005B5 43 B9 03         [24] 1645 	orl	_P0DIR,#0x03
                                   1646 ;	board/zbs_segmented_uk/../sem9010.c:273: P0PULL &= ~(1 << 2);                          // disable miso pullup
      0005B8 53 BC FB         [24] 1647 	anl	_P0PULL,#0xfb
                                   1648 ;	board/zbs_segmented_uk/../sem9010.c:274: P1FUNC &= ~(1 << 6);                          // disable clock output
      0005BB 53 AE BF         [24] 1649 	anl	_P1FUNC,#0xbf
                                   1650 ;	board/zbs_segmented_uk/../sem9010.c:275: P0FUNC &= ~((1 << 0) | (1 << 1) | (1 << 2));  // disable SPI functions
      0005BE 53 AD F8         [24] 1651 	anl	_P0FUNC,#0xf8
                                   1652 ;	board/zbs_segmented_uk/../sem9010.c:276: }
      0005C1 22               [24] 1653 	ret
                                   1654 ;------------------------------------------------------------
                                   1655 ;Allocation info for local variables in function 'epdDraw'
                                   1656 ;------------------------------------------------------------
                                   1657 ;	board/zbs_segmented_uk/../sem9010.c:278: __bit epdDraw() {
                                   1658 ;	-----------------------------------------
                                   1659 ;	 function epdDraw
                                   1660 ;	-----------------------------------------
      0005C2                       1661 _epdDraw:
                                   1662 ;	board/zbs_segmented_uk/../sem9010.c:280: if (!screenPrvRegWrite(0x0d, *(uint32_t __xdata *)(epdSegmentData + 0)))
      0005C2 90r00r10         [24] 1663 	mov	dptr,#_epdSegmentData
      0005C5 E0               [24] 1664 	movx	a,@dptr
      0005C6 FC               [12] 1665 	mov	r4,a
      0005C7 A3               [24] 1666 	inc	dptr
      0005C8 E0               [24] 1667 	movx	a,@dptr
      0005C9 FD               [12] 1668 	mov	r5,a
      0005CA A3               [24] 1669 	inc	dptr
      0005CB E0               [24] 1670 	movx	a,@dptr
      0005CC FE               [12] 1671 	mov	r6,a
      0005CD A3               [24] 1672 	inc	dptr
      0005CE E0               [24] 1673 	movx	a,@dptr
      0005CF FF               [12] 1674 	mov	r7,a
      0005D0 90r00r04         [24] 1675 	mov	dptr,#_screenPrvRegWriteGuts_PARM_2
      0005D3 74 0D            [12] 1676 	mov	a,#0x0d
      0005D5 F0               [24] 1677 	movx	@dptr,a
      0005D6 8C 82            [24] 1678 	mov	dpl,r4
      0005D8 8D 83            [24] 1679 	mov	dph,r5
      0005DA 8E F0            [24] 1680 	mov	b,r6
      0005DC EF               [12] 1681 	mov	a,r7
      0005DD 12r00r7F         [24] 1682 	lcall	_screenPrvRegWriteGuts
                                   1683 ;	board/zbs_segmented_uk/../sem9010.c:281: return false;
      0005E0 40 01            [24] 1684 	jc	00102$
      0005E2 22               [24] 1685 	ret
      0005E3                       1686 00102$:
                                   1687 ;	board/zbs_segmented_uk/../sem9010.c:282: if (!screenPrvRegWrite(0x0e, *(uint32_t __xdata *)(epdSegmentData + 3)))
      0005E3 90r00r13         [24] 1688 	mov	dptr,#(_epdSegmentData + 0x0003)
      0005E6 E0               [24] 1689 	movx	a,@dptr
      0005E7 FC               [12] 1690 	mov	r4,a
      0005E8 A3               [24] 1691 	inc	dptr
      0005E9 E0               [24] 1692 	movx	a,@dptr
      0005EA FD               [12] 1693 	mov	r5,a
      0005EB A3               [24] 1694 	inc	dptr
      0005EC E0               [24] 1695 	movx	a,@dptr
      0005ED FE               [12] 1696 	mov	r6,a
      0005EE A3               [24] 1697 	inc	dptr
      0005EF E0               [24] 1698 	movx	a,@dptr
      0005F0 FF               [12] 1699 	mov	r7,a
      0005F1 90r00r04         [24] 1700 	mov	dptr,#_screenPrvRegWriteGuts_PARM_2
      0005F4 74 0E            [12] 1701 	mov	a,#0x0e
      0005F6 F0               [24] 1702 	movx	@dptr,a
      0005F7 8C 82            [24] 1703 	mov	dpl,r4
      0005F9 8D 83            [24] 1704 	mov	dph,r5
      0005FB 8E F0            [24] 1705 	mov	b,r6
      0005FD EF               [12] 1706 	mov	a,r7
      0005FE 12r00r7F         [24] 1707 	lcall	_screenPrvRegWriteGuts
                                   1708 ;	board/zbs_segmented_uk/../sem9010.c:283: return false;
      000601 40 01            [24] 1709 	jc	00104$
      000603 22               [24] 1710 	ret
      000604                       1711 00104$:
                                   1712 ;	board/zbs_segmented_uk/../sem9010.c:284: if (!screenPrvRegWrite(0x0f, *(uint32_t __xdata *)(epdSegmentData + 6)))
      000604 90r00r16         [24] 1713 	mov	dptr,#(_epdSegmentData + 0x0006)
      000607 E0               [24] 1714 	movx	a,@dptr
      000608 FC               [12] 1715 	mov	r4,a
      000609 A3               [24] 1716 	inc	dptr
      00060A E0               [24] 1717 	movx	a,@dptr
      00060B FD               [12] 1718 	mov	r5,a
      00060C A3               [24] 1719 	inc	dptr
      00060D E0               [24] 1720 	movx	a,@dptr
      00060E FE               [12] 1721 	mov	r6,a
      00060F A3               [24] 1722 	inc	dptr
      000610 E0               [24] 1723 	movx	a,@dptr
      000611 FF               [12] 1724 	mov	r7,a
      000612 90r00r04         [24] 1725 	mov	dptr,#_screenPrvRegWriteGuts_PARM_2
      000615 74 0F            [12] 1726 	mov	a,#0x0f
      000617 F0               [24] 1727 	movx	@dptr,a
      000618 8C 82            [24] 1728 	mov	dpl,r4
      00061A 8D 83            [24] 1729 	mov	dph,r5
      00061C 8E F0            [24] 1730 	mov	b,r6
      00061E EF               [12] 1731 	mov	a,r7
      00061F 12r00r7F         [24] 1732 	lcall	_screenPrvRegWriteGuts
                                   1733 ;	board/zbs_segmented_uk/../sem9010.c:285: return false;
      000622 40 01            [24] 1734 	jc	00106$
      000624 22               [24] 1735 	ret
      000625                       1736 00106$:
                                   1737 ;	board/zbs_segmented_uk/../sem9010.c:286: if (!screenPrvRegWrite(0x10, *(uint32_t __xdata *)(epdSegmentData + 9)))
      000625 90r00r19         [24] 1738 	mov	dptr,#(_epdSegmentData + 0x0009)
      000628 E0               [24] 1739 	movx	a,@dptr
      000629 FC               [12] 1740 	mov	r4,a
      00062A A3               [24] 1741 	inc	dptr
      00062B E0               [24] 1742 	movx	a,@dptr
      00062C FD               [12] 1743 	mov	r5,a
      00062D A3               [24] 1744 	inc	dptr
      00062E E0               [24] 1745 	movx	a,@dptr
      00062F FE               [12] 1746 	mov	r6,a
      000630 A3               [24] 1747 	inc	dptr
      000631 E0               [24] 1748 	movx	a,@dptr
      000632 FF               [12] 1749 	mov	r7,a
      000633 90r00r04         [24] 1750 	mov	dptr,#_screenPrvRegWriteGuts_PARM_2
      000636 74 10            [12] 1751 	mov	a,#0x10
      000638 F0               [24] 1752 	movx	@dptr,a
      000639 8C 82            [24] 1753 	mov	dpl,r4
      00063B 8D 83            [24] 1754 	mov	dph,r5
      00063D 8E F0            [24] 1755 	mov	b,r6
      00063F EF               [12] 1756 	mov	a,r7
      000640 12r00r7F         [24] 1757 	lcall	_screenPrvRegWriteGuts
                                   1758 ;	board/zbs_segmented_uk/../sem9010.c:287: return false;
      000643 40 01            [24] 1759 	jc	00108$
      000645 22               [24] 1760 	ret
      000646                       1761 00108$:
                                   1762 ;	board/zbs_segmented_uk/../sem9010.c:289: if (!screenPrvRegWrite(0x00, isInverted ? 0xa0001c : 0x80001c))
      000646 30*01 0A         [24] 1763 	jnb	_isInverted,00113$
      000649 7C 1C            [12] 1764 	mov	r4,#0x1c
      00064B 7D 00            [12] 1765 	mov	r5,#0x00
      00064D 7E A0            [12] 1766 	mov	r6,#0xa0
      00064F 7F 00            [12] 1767 	mov	r7,#0x00
      000651 80 08            [24] 1768 	sjmp	00114$
      000653                       1769 00113$:
      000653 7C 1C            [12] 1770 	mov	r4,#0x1c
      000655 7D 00            [12] 1771 	mov	r5,#0x00
      000657 7E 80            [12] 1772 	mov	r6,#0x80
      000659 7F 00            [12] 1773 	mov	r7,#0x00
      00065B                       1774 00114$:
      00065B 90r00r04         [24] 1775 	mov	dptr,#_screenPrvRegWriteGuts_PARM_2
      00065E E4               [12] 1776 	clr	a
      00065F F0               [24] 1777 	movx	@dptr,a
      000660 8C 82            [24] 1778 	mov	dpl,r4
      000662 8D 83            [24] 1779 	mov	dph,r5
      000664 8E F0            [24] 1780 	mov	b,r6
      000666 EF               [12] 1781 	mov	a,r7
      000667 12r00r7F         [24] 1782 	lcall	_screenPrvRegWriteGuts
                                   1783 ;	board/zbs_segmented_uk/../sem9010.c:290: return false;
      00066A 40 01            [24] 1784 	jc	00110$
      00066C 22               [24] 1785 	ret
      00066D                       1786 00110$:
                                   1787 ;	board/zbs_segmented_uk/../sem9010.c:292: timerDelay(TIMER_TICKS_PER_SECOND / 10000);
      00066D 90 00 85         [24] 1788 	mov	dptr,#(0x85&0x00ff)
      000670 E4               [12] 1789 	clr	a
      000671 F5 F0            [12] 1790 	mov	b,a
      000673 12r00r00         [24] 1791 	lcall	_timerDelay
                                   1792 ;	board/zbs_segmented_uk/../sem9010.c:293: memcpy(curEpdSegmentData, epdSegmentData, sizeof(epdSegmentData));
      000676 90r00r00         [24] 1793 	mov	dptr,#___memcpy_PARM_2
      000679 74r10            [12] 1794 	mov	a,#_epdSegmentData
      00067B F0               [24] 1795 	movx	@dptr,a
      00067C 74s00            [12] 1796 	mov	a,#(_epdSegmentData >> 8)
      00067E A3               [24] 1797 	inc	dptr
      00067F F0               [24] 1798 	movx	@dptr,a
      000680 E4               [12] 1799 	clr	a
      000681 A3               [24] 1800 	inc	dptr
      000682 F0               [24] 1801 	movx	@dptr,a
      000683 90r00r00         [24] 1802 	mov	dptr,#___memcpy_PARM_3
      000686 74 0C            [12] 1803 	mov	a,#0x0c
      000688 F0               [24] 1804 	movx	@dptr,a
      000689 E4               [12] 1805 	clr	a
      00068A A3               [24] 1806 	inc	dptr
      00068B F0               [24] 1807 	movx	@dptr,a
      00068C 90r00r04         [24] 1808 	mov	dptr,#_curEpdSegmentData
      00068F 75 F0 00         [24] 1809 	mov	b,#0x00
      000692 12r00r00         [24] 1810 	lcall	___memcpy
                                   1811 ;	board/zbs_segmented_uk/../sem9010.c:294: screen_start_time = timerGet();
      000695 12r00r00         [24] 1812 	lcall	_timerGet
      000698 AC 82            [24] 1813 	mov	r4,dpl
      00069A AD 83            [24] 1814 	mov	r5,dph
      00069C AE F0            [24] 1815 	mov	r6,b
      00069E FF               [12] 1816 	mov	r7,a
      00069F 90r00r00         [24] 1817 	mov	dptr,#_screen_start_time
      0006A2 EC               [12] 1818 	mov	a,r4
      0006A3 F0               [24] 1819 	movx	@dptr,a
      0006A4 ED               [12] 1820 	mov	a,r5
      0006A5 A3               [24] 1821 	inc	dptr
      0006A6 F0               [24] 1822 	movx	@dptr,a
      0006A7 EE               [12] 1823 	mov	a,r6
      0006A8 A3               [24] 1824 	inc	dptr
      0006A9 F0               [24] 1825 	movx	@dptr,a
      0006AA EF               [12] 1826 	mov	a,r7
      0006AB A3               [24] 1827 	inc	dptr
      0006AC F0               [24] 1828 	movx	@dptr,a
                                   1829 ;	board/zbs_segmented_uk/../sem9010.c:295: display_is_drawing = 1;
                                   1830 ;	assignBit
      0006AD D2*00            [12] 1831 	setb	_display_is_drawing
                                   1832 ;	board/zbs_segmented_uk/../sem9010.c:296: return true;
      0006AF D3               [12] 1833 	setb	c
                                   1834 ;	board/zbs_segmented_uk/../sem9010.c:297: }
      0006B0 22               [24] 1835 	ret
                                   1836 ;------------------------------------------------------------
                                   1837 ;Allocation info for local variables in function 'epdUpdate'
                                   1838 ;------------------------------------------------------------
                                   1839 ;	board/zbs_segmented_uk/../sem9010.c:299: __bit epdUpdate() {
                                   1840 ;	-----------------------------------------
                                   1841 ;	 function epdUpdate
                                   1842 ;	-----------------------------------------
      0006B1                       1843 _epdUpdate:
                                   1844 ;	board/zbs_segmented_uk/../sem9010.c:300: if (memcmp(curEpdSegmentData, epdSegmentData, sizeof(epdSegmentData)) == 0) {
      0006B1 90r00r00         [24] 1845 	mov	dptr,#_memcmp_PARM_2
      0006B4 74r10            [12] 1846 	mov	a,#_epdSegmentData
      0006B6 F0               [24] 1847 	movx	@dptr,a
      0006B7 74s00            [12] 1848 	mov	a,#(_epdSegmentData >> 8)
      0006B9 A3               [24] 1849 	inc	dptr
      0006BA F0               [24] 1850 	movx	@dptr,a
      0006BB E4               [12] 1851 	clr	a
      0006BC A3               [24] 1852 	inc	dptr
      0006BD F0               [24] 1853 	movx	@dptr,a
      0006BE 90r00r00         [24] 1854 	mov	dptr,#_memcmp_PARM_3
      0006C1 74 0C            [12] 1855 	mov	a,#0x0c
      0006C3 F0               [24] 1856 	movx	@dptr,a
      0006C4 E4               [12] 1857 	clr	a
      0006C5 A3               [24] 1858 	inc	dptr
      0006C6 F0               [24] 1859 	movx	@dptr,a
      0006C7 90r00r04         [24] 1860 	mov	dptr,#_curEpdSegmentData
      0006CA 75 F0 00         [24] 1861 	mov	b,#0x00
      0006CD 12r00r00         [24] 1862 	lcall	_memcmp
      0006D0 E5 82            [12] 1863 	mov	a,dpl
      0006D2 85 83 F0         [24] 1864 	mov	b,dph
      0006D5 45 F0            [12] 1865 	orl	a,b
      0006D7 70 02            [24] 1866 	jnz	00102$
                                   1867 ;	board/zbs_segmented_uk/../sem9010.c:301: return false;
      0006D9 C3               [12] 1868 	clr	c
      0006DA 22               [24] 1869 	ret
      0006DB                       1870 00102$:
                                   1871 ;	board/zbs_segmented_uk/../sem9010.c:303: return epdDraw();
      0006DB 12r05rC2         [24] 1872 	lcall	_epdDraw
      0006DE 92*02            [24] 1873 	mov  _epdUpdate_sloc0_1_0,c
                                   1874 ;	board/zbs_segmented_uk/../sem9010.c:305: }
      0006E0 22               [24] 1875 	ret
                                   1876 ;------------------------------------------------------------
                                   1877 ;Allocation info for local variables in function 'epdSetup'
                                   1878 ;------------------------------------------------------------
                                   1879 ;	board/zbs_segmented_uk/../sem9010.c:307: __bit epdSetup(__bit inverted) {
                                   1880 ;	-----------------------------------------
                                   1881 ;	 function epdSetup
                                   1882 ;	-----------------------------------------
      0006E1                       1883 _epdSetup:
                                   1884 ;	board/zbs_segmented_uk/../sem9010.c:309: isInverted = inverted;
                                   1885 ;	assignBit
      0006E1 A2*03            [12] 1886 	mov	c,_epdSetup_PARM_1
      0006E3 92*01            [24] 1887 	mov	_isInverted,c
                                   1888 ;	board/zbs_segmented_uk/../sem9010.c:310: display_is_drawing = 0;
                                   1889 ;	assignBit
      0006E5 C2*00            [12] 1890 	clr	_display_is_drawing
                                   1891 ;	board/zbs_segmented_uk/../sem9010.c:311: P2_1 = 1;
                                   1892 ;	assignBit
      0006E7 D2 A1            [12] 1893 	setb	_P2_1
                                   1894 ;	board/zbs_segmented_uk/../sem9010.c:312: P2_2 = 1;  // power it up
                                   1895 ;	assignBit
      0006E9 D2 A2            [12] 1896 	setb	_P2_2
                                   1897 ;	board/zbs_segmented_uk/../sem9010.c:313: timerDelay(TIMER_TICKS_PER_SECOND / 1000);
      0006EB 90 05 35         [24] 1898 	mov	dptr,#0x0535
      0006EE E4               [12] 1899 	clr	a
      0006EF F5 F0            [12] 1900 	mov	b,a
      0006F1 12r00r00         [24] 1901 	lcall	_timerDelay
                                   1902 ;	board/zbs_segmented_uk/../sem9010.c:314: P1_7 = 0;  // assert reset
                                   1903 ;	assignBit
      0006F4 C2 97            [12] 1904 	clr	_P1_7
                                   1905 ;	board/zbs_segmented_uk/../sem9010.c:315: timerDelay(TIMER_TICKS_PER_SECOND / 100);
      0006F6 90 34 15         [24] 1906 	mov	dptr,#0x3415
      0006F9 E4               [12] 1907 	clr	a
      0006FA F5 F0            [12] 1908 	mov	b,a
      0006FC 12r00r00         [24] 1909 	lcall	_timerDelay
                                   1910 ;	board/zbs_segmented_uk/../sem9010.c:316: P1_7 = 1;  // release reset
                                   1911 ;	assignBit
      0006FF D2 97            [12] 1912 	setb	_P1_7
                                   1913 ;	board/zbs_segmented_uk/../sem9010.c:317: timerDelay(TIMER_TICKS_PER_SECOND / 1000);
      000701 90 05 35         [24] 1914 	mov	dptr,#0x0535
      000704 E4               [12] 1915 	clr	a
      000705 F5 F0            [12] 1916 	mov	b,a
      000707 12r00r00         [24] 1917 	lcall	_timerDelay
                                   1918 ;	board/zbs_segmented_uk/../sem9010.c:320: if (!screenPrvTimedWait(TIMER_TICKS_PER_SECOND)) {
      00070A 90 58 55         [24] 1919 	mov	dptr,#0x5855
      00070D 75 F0 14         [24] 1920 	mov	b,#0x14
      000710 E4               [12] 1921 	clr	a
      000711 12r00r00         [24] 1922 	lcall	_screenPrvTimedWait
                                   1923 ;	board/zbs_segmented_uk/../sem9010.c:321: return false;
      000714 40 01            [24] 1924 	jc	00102$
      000716 22               [24] 1925 	ret
      000717                       1926 00102$:
                                   1927 ;	board/zbs_segmented_uk/../sem9010.c:328: if (!screenPrvRegWrite(0x01, 0x070000))
      000717 90r00r04         [24] 1928 	mov	dptr,#_screenPrvRegWriteGuts_PARM_2
      00071A 74 01            [12] 1929 	mov	a,#0x01
      00071C F0               [24] 1930 	movx	@dptr,a
      00071D 90 00 00         [24] 1931 	mov	dptr,#0x0000
      000720 75 F0 07         [24] 1932 	mov	b,#0x07
      000723 E4               [12] 1933 	clr	a
      000724 12r00r7F         [24] 1934 	lcall	_screenPrvRegWriteGuts
                                   1935 ;	board/zbs_segmented_uk/../sem9010.c:329: return false;
      000727 40 01            [24] 1936 	jc	00104$
      000729 22               [24] 1937 	ret
      00072A                       1938 00104$:
                                   1939 ;	board/zbs_segmented_uk/../sem9010.c:330: if (!screenPrvRegWrite(0x03, 0x400000))
      00072A 90r00r04         [24] 1940 	mov	dptr,#_screenPrvRegWriteGuts_PARM_2
      00072D 74 03            [12] 1941 	mov	a,#0x03
      00072F F0               [24] 1942 	movx	@dptr,a
      000730 90 00 00         [24] 1943 	mov	dptr,#0x0000
      000733 75 F0 40         [24] 1944 	mov	b,#0x40
      000736 E4               [12] 1945 	clr	a
      000737 12r00r7F         [24] 1946 	lcall	_screenPrvRegWriteGuts
                                   1947 ;	board/zbs_segmented_uk/../sem9010.c:331: return false;
      00073A 40 01            [24] 1948 	jc	00106$
      00073C 22               [24] 1949 	ret
      00073D                       1950 00106$:
                                   1951 ;	board/zbs_segmented_uk/../sem9010.c:332: if (!screenPrvRegWrite(0x04, 0xfc0000))
      00073D 90r00r04         [24] 1952 	mov	dptr,#_screenPrvRegWriteGuts_PARM_2
      000740 74 04            [12] 1953 	mov	a,#0x04
      000742 F0               [24] 1954 	movx	@dptr,a
      000743 90 00 00         [24] 1955 	mov	dptr,#0x0000
      000746 75 F0 FC         [24] 1956 	mov	b,#0xfc
      000749 E4               [12] 1957 	clr	a
      00074A 12r00r7F         [24] 1958 	lcall	_screenPrvRegWriteGuts
                                   1959 ;	board/zbs_segmented_uk/../sem9010.c:333: return false;
      00074D 40 01            [24] 1960 	jc	00108$
      00074F 22               [24] 1961 	ret
      000750                       1962 00108$:
                                   1963 ;	board/zbs_segmented_uk/../sem9010.c:335: if (!screenPrvRegWrite(0x14, 0x440000))
      000750 90r00r04         [24] 1964 	mov	dptr,#_screenPrvRegWriteGuts_PARM_2
      000753 74 14            [12] 1965 	mov	a,#0x14
      000755 F0               [24] 1966 	movx	@dptr,a
      000756 90 00 00         [24] 1967 	mov	dptr,#0x0000
      000759 75 F0 44         [24] 1968 	mov	b,#0x44
      00075C E4               [12] 1969 	clr	a
      00075D 12r00r7F         [24] 1970 	lcall	_screenPrvRegWriteGuts
                                   1971 ;	board/zbs_segmented_uk/../sem9010.c:336: return false;
      000760 40 01            [24] 1972 	jc	00110$
      000762 22               [24] 1973 	ret
      000763                       1974 00110$:
                                   1975 ;	board/zbs_segmented_uk/../sem9010.c:337: if (!screenPrvRegWrite(0x15, inverted ? 0x680001 : 0x860000))
      000763 30*03 0A         [24] 1976 	jnb	_epdSetup_PARM_1,00121$
      000766 7C 01            [12] 1977 	mov	r4,#0x01
      000768 7D 00            [12] 1978 	mov	r5,#0x00
      00076A 7E 68            [12] 1979 	mov	r6,#0x68
      00076C 7F 00            [12] 1980 	mov	r7,#0x00
      00076E 80 08            [24] 1981 	sjmp	00122$
      000770                       1982 00121$:
      000770 7C 00            [12] 1983 	mov	r4,#0x00
      000772 7D 00            [12] 1984 	mov	r5,#0x00
      000774 7E 86            [12] 1985 	mov	r6,#0x86
      000776 7F 00            [12] 1986 	mov	r7,#0x00
      000778                       1987 00122$:
      000778 90r00r04         [24] 1988 	mov	dptr,#_screenPrvRegWriteGuts_PARM_2
      00077B 74 15            [12] 1989 	mov	a,#0x15
      00077D F0               [24] 1990 	movx	@dptr,a
      00077E 8C 82            [24] 1991 	mov	dpl,r4
      000780 8D 83            [24] 1992 	mov	dph,r5
      000782 8E F0            [24] 1993 	mov	b,r6
      000784 EF               [12] 1994 	mov	a,r7
      000785 12r00r7F         [24] 1995 	lcall	_screenPrvRegWriteGuts
                                   1996 ;	board/zbs_segmented_uk/../sem9010.c:338: return false;
      000788 40 01            [24] 1997 	jc	00112$
      00078A 22               [24] 1998 	ret
      00078B                       1999 00112$:
                                   2000 ;	board/zbs_segmented_uk/../sem9010.c:339: if (!screenPrvRegWrite(0x16, inverted ? 0x240000 : 0x040000))
      00078B 30*03 0A         [24] 2001 	jnb	_epdSetup_PARM_1,00123$
      00078E 7C 00            [12] 2002 	mov	r4,#0x00
      000790 7D 00            [12] 2003 	mov	r5,#0x00
      000792 7E 24            [12] 2004 	mov	r6,#0x24
      000794 7F 00            [12] 2005 	mov	r7,#0x00
      000796 80 08            [24] 2006 	sjmp	00124$
      000798                       2007 00123$:
      000798 7C 00            [12] 2008 	mov	r4,#0x00
      00079A 7D 00            [12] 2009 	mov	r5,#0x00
      00079C 7E 04            [12] 2010 	mov	r6,#0x04
      00079E 7F 00            [12] 2011 	mov	r7,#0x00
      0007A0                       2012 00124$:
      0007A0 90r00r04         [24] 2013 	mov	dptr,#_screenPrvRegWriteGuts_PARM_2
      0007A3 74 16            [12] 2014 	mov	a,#0x16
      0007A5 F0               [24] 2015 	movx	@dptr,a
      0007A6 8C 82            [24] 2016 	mov	dpl,r4
      0007A8 8D 83            [24] 2017 	mov	dph,r5
      0007AA 8E F0            [24] 2018 	mov	b,r6
      0007AC EF               [12] 2019 	mov	a,r7
      0007AD 12r00r7F         [24] 2020 	lcall	_screenPrvRegWriteGuts
                                   2021 ;	board/zbs_segmented_uk/../sem9010.c:340: return false;
      0007B0 40 01            [24] 2022 	jc	00114$
      0007B2 22               [24] 2023 	ret
      0007B3                       2024 00114$:
                                   2025 ;	board/zbs_segmented_uk/../sem9010.c:342: if (!screenPrvRegWrite(0x19, 0x082514))
      0007B3 90r00r04         [24] 2026 	mov	dptr,#_screenPrvRegWriteGuts_PARM_2
      0007B6 74 19            [12] 2027 	mov	a,#0x19
      0007B8 F0               [24] 2028 	movx	@dptr,a
      0007B9 90 25 14         [24] 2029 	mov	dptr,#0x2514
      0007BC 75 F0 08         [24] 2030 	mov	b,#0x08
      0007BF E4               [12] 2031 	clr	a
      0007C0 12r00r7F         [24] 2032 	lcall	_screenPrvRegWriteGuts
                                   2033 ;	board/zbs_segmented_uk/../sem9010.c:343: return false;
      0007C3 40 01            [24] 2034 	jc	00116$
      0007C5 22               [24] 2035 	ret
      0007C6                       2036 00116$:
                                   2037 ;	board/zbs_segmented_uk/../sem9010.c:344: if (!screenPrvRegWrite(0x1a, 0xa02000))
      0007C6 90r00r04         [24] 2038 	mov	dptr,#_screenPrvRegWriteGuts_PARM_2
      0007C9 74 1A            [12] 2039 	mov	a,#0x1a
      0007CB F0               [24] 2040 	movx	@dptr,a
      0007CC 90 20 00         [24] 2041 	mov	dptr,#0x2000
      0007CF 75 F0 A0         [24] 2042 	mov	b,#0xa0
      0007D2 E4               [12] 2043 	clr	a
      0007D3 12r00r7F         [24] 2044 	lcall	_screenPrvRegWriteGuts
                                   2045 ;	board/zbs_segmented_uk/../sem9010.c:345: return false;
      0007D6 40 01            [24] 2046 	jc	00118$
      0007D8 22               [24] 2047 	ret
      0007D9                       2048 00118$:
                                   2049 ;	board/zbs_segmented_uk/../sem9010.c:346: memset(curEpdSegmentData, 0, sizeof(epdSegmentData));
      0007D9 90r00r00         [24] 2050 	mov	dptr,#_memset_PARM_2
      0007DC E4               [12] 2051 	clr	a
      0007DD F0               [24] 2052 	movx	@dptr,a
      0007DE 90r00r00         [24] 2053 	mov	dptr,#_memset_PARM_3
      0007E1 74 0C            [12] 2054 	mov	a,#0x0c
      0007E3 F0               [24] 2055 	movx	@dptr,a
      0007E4 E4               [12] 2056 	clr	a
      0007E5 A3               [24] 2057 	inc	dptr
      0007E6 F0               [24] 2058 	movx	@dptr,a
      0007E7 90r00r04         [24] 2059 	mov	dptr,#_curEpdSegmentData
      0007EA 75 F0 00         [24] 2060 	mov	b,#0x00
      0007ED 12r00r00         [24] 2061 	lcall	_memset
                                   2062 ;	board/zbs_segmented_uk/../sem9010.c:347: return true;
      0007F0 D3               [12] 2063 	setb	c
                                   2064 ;	board/zbs_segmented_uk/../sem9010.c:348: }
      0007F1 22               [24] 2065 	ret
                                   2066 ;------------------------------------------------------------
                                   2067 ;Allocation info for local variables in function 'epdClear'
                                   2068 ;------------------------------------------------------------
                                   2069 ;	board/zbs_segmented_uk/../sem9010.c:349: void epdClear() {
                                   2070 ;	-----------------------------------------
                                   2071 ;	 function epdClear
                                   2072 ;	-----------------------------------------
      0007F2                       2073 _epdClear:
                                   2074 ;	board/zbs_segmented_uk/../sem9010.c:350: memset(epdSegmentData, 0, sizeof(epdSegmentData));
      0007F2 90r00r00         [24] 2075 	mov	dptr,#_memset_PARM_2
      0007F5 E4               [12] 2076 	clr	a
      0007F6 F0               [24] 2077 	movx	@dptr,a
      0007F7 90r00r00         [24] 2078 	mov	dptr,#_memset_PARM_3
      0007FA 74 0C            [12] 2079 	mov	a,#0x0c
      0007FC F0               [24] 2080 	movx	@dptr,a
      0007FD E4               [12] 2081 	clr	a
      0007FE A3               [24] 2082 	inc	dptr
      0007FF F0               [24] 2083 	movx	@dptr,a
      000800 90r00r10         [24] 2084 	mov	dptr,#_epdSegmentData
      000803 75 F0 00         [24] 2085 	mov	b,#0x00
                                   2086 ;	board/zbs_segmented_uk/../sem9010.c:351: }
      000806 02r00r00         [24] 2087 	ljmp	_memset
                                   2088 ;------------------------------------------------------------
                                   2089 ;Allocation info for local variables in function 'epdSetPos'
                                   2090 ;------------------------------------------------------------
                                   2091 ;p                         Allocated with name '_epdSetPos_p_65536_87'
                                   2092 ;------------------------------------------------------------
                                   2093 ;	board/zbs_segmented_uk/../sem9010.c:355: void epdSetPos(uint8_t p) {
                                   2094 ;	-----------------------------------------
                                   2095 ;	 function epdSetPos
                                   2096 ;	-----------------------------------------
      000809                       2097 _epdSetPos:
      000809 E5 82            [12] 2098 	mov	a,dpl
      00080B 90r00r14         [24] 2099 	mov	dptr,#_epdSetPos_p_65536_87
                                   2100 ;	board/zbs_segmented_uk/../sem9010.c:356: if (p >= sizeof(epdSegmentData)) {
      00080E F0               [24] 2101 	movx	@dptr,a ; Peephole dmitrygr.0005 - SRSLY, WTF?
      00080F FF               [12] 2102 	mov	r7,a
      000810 BF 0C 00         [24] 2103 	cjne	r7,#0x0c,00109$
      000813                       2104 00109$:
      000813 40 05            [24] 2105 	jc	00102$
                                   2106 ;	board/zbs_segmented_uk/../sem9010.c:357: p = 0;
      000815 90r00r14         [24] 2107 	mov	dptr,#_epdSetPos_p_65536_87
      000818 E4               [12] 2108 	clr	a
      000819 F0               [24] 2109 	movx	@dptr,a
      00081A                       2110 00102$:
                                   2111 ;	board/zbs_segmented_uk/../sem9010.c:359: position = p;
      00081A 90r00r14         [24] 2112 	mov	dptr,#_epdSetPos_p_65536_87
      00081D E0               [24] 2113 	movx	a,@dptr
      00081E 90r00r1C         [24] 2114 	mov	dptr,#_position
      000821 F0               [24] 2115 	movx	@dptr,a
                                   2116 ;	board/zbs_segmented_uk/../sem9010.c:360: }
      000822 22               [24] 2117 	ret
                                   2118 ;------------------------------------------------------------
                                   2119 ;Allocation info for local variables in function 'writeCharEPD'
                                   2120 ;------------------------------------------------------------
                                   2121 ;c                         Allocated with name '_writeCharEPD_c_65536_90'
                                   2122 ;------------------------------------------------------------
                                   2123 ;	board/zbs_segmented_uk/../sem9010.c:362: void writeCharEPD(char c) {
                                   2124 ;	-----------------------------------------
                                   2125 ;	 function writeCharEPD
                                   2126 ;	-----------------------------------------
      000823                       2127 _writeCharEPD:
      000823 E5 82            [12] 2128 	mov	a,dpl
      000825 90r00r15         [24] 2129 	mov	dptr,#_writeCharEPD_c_65536_90
      000828 F0               [24] 2130 	movx	@dptr,a
                                   2131 ;	board/zbs_segmented_uk/../sem9010.c:363: writeDigitToBuffer(position, c);
      000829 90r00r1C         [24] 2132 	mov	dptr,#_position
      00082C E0               [24] 2133 	movx	a,@dptr
      00082D FF               [12] 2134 	mov	r7,a
      00082E 90r00r15         [24] 2135 	mov	dptr,#_writeCharEPD_c_65536_90
      000831 E0               [24] 2136 	movx	a,@dptr
      000832 90r00r0C         [24] 2137 	mov	dptr,#_writeDigitToBuffer_PARM_2
      000835 F0               [24] 2138 	movx	@dptr,a
      000836 8F 82            [24] 2139 	mov	dpl,r7
      000838 12r02r4C         [24] 2140 	lcall	_writeDigitToBuffer
                                   2141 ;	board/zbs_segmented_uk/../sem9010.c:364: position++;
      00083B 90r00r1C         [24] 2142 	mov	dptr,#_position
      00083E E0               [24] 2143 	movx	a,@dptr
      00083F 24 01            [12] 2144 	add	a,#0x01
                                   2145 ;	board/zbs_segmented_uk/../sem9010.c:365: if (position >= sizeof(epdSegmentData)) {
      000841 F0               [24] 2146 	movx	@dptr,a ; Peephole dmitrygr.0005 - SRSLY, WTF?
      000842 FF               [12] 2147 	mov	r7,a
      000843 BF 0C 00         [24] 2148 	cjne	r7,#0x0c,00109$
      000846                       2149 00109$:
      000846 40 05            [24] 2150 	jc	00103$
                                   2151 ;	board/zbs_segmented_uk/../sem9010.c:366: position = 0;
      000848 90r00r1C         [24] 2152 	mov	dptr,#_position
      00084B E4               [12] 2153 	clr	a
      00084C F0               [24] 2154 	movx	@dptr,a
      00084D                       2155 00103$:
                                   2156 ;	board/zbs_segmented_uk/../sem9010.c:368: }
      00084D 22               [24] 2157 	ret
                                   2158 ;------------------------------------------------------------
                                   2159 ;Allocation info for local variables in function 'epdPrint'
                                   2160 ;------------------------------------------------------------
                                   2161 ;pos                       Allocated to stack - sp -2
                                   2162 ;fmt                       Allocated to stack - sp -4
                                   2163 ;vl                        Allocated to registers r7 
                                   2164 ;p                         Allocated to registers 
                                   2165 ;buffer                    Allocated with name '_epdPrint_buffer_65536_94'
                                   2166 ;------------------------------------------------------------
                                   2167 ;	board/zbs_segmented_uk/../sem9010.c:370: void epdPrint(uint8_t pos, const char __code *fmt, ...) __reentrant {
                                   2168 ;	-----------------------------------------
                                   2169 ;	 function epdPrint
                                   2170 ;	-----------------------------------------
      00084E                       2171 _epdPrint:
                                   2172 ;	board/zbs_segmented_uk/../sem9010.c:373: va_start(vl, fmt);
      00084E E5 81            [12] 2173 	mov	a,sp
      000850 24 FC            [12] 2174 	add	a,#0xfc
      000852 FF               [12] 2175 	mov	r7,a
                                   2176 ;	board/zbs_segmented_uk/../sem9010.c:374: spr(buffer, fmt, vl);
      000853 7E 00            [12] 2177 	mov	r6,#0x00
      000855 7D 40            [12] 2178 	mov	r5,#0x40
      000857 C0 07            [24] 2179 	push	ar7
      000859 C0 06            [24] 2180 	push	ar6
      00085B C0 05            [24] 2181 	push	ar5
      00085D E5 81            [12] 2182 	mov	a,sp
      00085F 24 F9            [12] 2183 	add	a,#0xf9
      000861 F8               [12] 2184 	mov	r0,a
      000862 E6               [12] 2185 	mov	a,@r0
      000863 C0 E0            [24] 2186 	push	acc
      000865 08               [12] 2187 	inc	r0
      000866 E6               [12] 2188 	mov	a,@r0
      000867 C0 E0            [24] 2189 	push	acc
      000869 74r16            [12] 2190 	mov	a,#_epdPrint_buffer_65536_94
      00086B C0 E0            [24] 2191 	push	acc
      00086D 74s00            [12] 2192 	mov	a,#(_epdPrint_buffer_65536_94 >> 8)
      00086F C0 E0            [24] 2193 	push	acc
      000871 12r00r00         [24] 2194 	lcall	_spr
      000874 E5 81            [12] 2195 	mov	a,sp
      000876 24 F9            [12] 2196 	add	a,#0xf9
      000878 F5 81            [12] 2197 	mov	sp,a
                                   2198 ;	board/zbs_segmented_uk/../sem9010.c:375: char *p = buffer;
      00087A 7Dr16            [12] 2199 	mov	r5,#_epdPrint_buffer_65536_94
      00087C 7Es00            [12] 2200 	mov	r6,#(_epdPrint_buffer_65536_94 >> 8)
      00087E 7F 00            [12] 2201 	mov	r7,#0x00
                                   2202 ;	board/zbs_segmented_uk/../sem9010.c:376: while (*p && pos < sizeof(epdSegmentData)) {
      000880 A8 81            [24] 2203 	mov	r0,sp
      000882 18               [12] 2204 	dec	r0
      000883 18               [12] 2205 	dec	r0
      000884 86 04            [24] 2206 	mov	ar4,@r0
      000886                       2207 00102$:
      000886 8D 82            [24] 2208 	mov	dpl,r5
      000888 8E 83            [24] 2209 	mov	dph,r6
      00088A 8F F0            [24] 2210 	mov	b,r7
      00088C 12r00r00         [24] 2211 	lcall	__gptrget
      00088F FB               [12] 2212 	mov	r3,a
      000890 60 2F            [24] 2213 	jz	00105$
      000892 BC 0C 00         [24] 2214 	cjne	r4,#0x0c,00121$
      000895                       2215 00121$:
      000895 50 2A            [24] 2216 	jnc	00105$
                                   2217 ;	board/zbs_segmented_uk/../sem9010.c:377: writeDigitToBuffer(pos++, *p++);
      000897 8C 02            [24] 2218 	mov	ar2,r4
      000899 0C               [12] 2219 	inc	r4
      00089A A8 81            [24] 2220 	mov	r0,sp
      00089C 18               [12] 2221 	dec	r0
      00089D 18               [12] 2222 	dec	r0
      00089E A6 04            [24] 2223 	mov	@r0,ar4
      0008A0 90r00r0C         [24] 2224 	mov	dptr,#_writeDigitToBuffer_PARM_2
      0008A3 EB               [12] 2225 	mov	a,r3
      0008A4 F0               [24] 2226 	movx	@dptr,a
      0008A5 0D               [12] 2227 	inc	r5
      0008A6 BD 00 01         [24] 2228 	cjne	r5,#0x00,00123$
      0008A9 0E               [12] 2229 	inc	r6
      0008AA                       2230 00123$:
      0008AA 8A 82            [24] 2231 	mov	dpl,r2
      0008AC C0 07            [24] 2232 	push	ar7
      0008AE C0 06            [24] 2233 	push	ar6
      0008B0 C0 05            [24] 2234 	push	ar5
      0008B2 C0 04            [24] 2235 	push	ar4
      0008B4 12r02r4C         [24] 2236 	lcall	_writeDigitToBuffer
      0008B7 D0 04            [24] 2237 	pop	ar4
      0008B9 D0 05            [24] 2238 	pop	ar5
      0008BB D0 06            [24] 2239 	pop	ar6
      0008BD D0 07            [24] 2240 	pop	ar7
                                   2241 ;	board/zbs_segmented_uk/../sem9010.c:379: va_end(vl);
      0008BF 80 C5            [24] 2242 	sjmp	00102$
      0008C1                       2243 00105$:
                                   2244 ;	board/zbs_segmented_uk/../sem9010.c:380: }
      0008C1 22               [24] 2245 	ret
                                   2246 ;------------------------------------------------------------
                                   2247 ;Allocation info for local variables in function 'is_drawing'
                                   2248 ;------------------------------------------------------------
                                   2249 ;	board/zbs_segmented_uk/../sem9010.c:381: uint8_t is_drawing() {
                                   2250 ;	-----------------------------------------
                                   2251 ;	 function is_drawing
                                   2252 ;	-----------------------------------------
      0008C2                       2253 _is_drawing:
                                   2254 ;	board/zbs_segmented_uk/../sem9010.c:382: if (display_is_drawing) {
      0008C2 30*00 40         [24] 2255 	jnb	_display_is_drawing,00105$
                                   2256 ;	board/zbs_segmented_uk/../sem9010.c:383: if (!P2_0 || (timerGet() - screen_start_time > (TIMER_TICKS_PER_SECOND * 3))) {
      0008C5 30 A0 33         [24] 2257 	jnb	_P2_0,00101$
      0008C8 12r00r00         [24] 2258 	lcall	_timerGet
      0008CB AC 82            [24] 2259 	mov	r4,dpl
      0008CD AD 83            [24] 2260 	mov	r5,dph
      0008CF AE F0            [24] 2261 	mov	r6,b
      0008D1 FF               [12] 2262 	mov	r7,a
      0008D2 90r00r00         [24] 2263 	mov	dptr,#_screen_start_time
      0008D5 E0               [24] 2264 	movx	a,@dptr
      0008D6 F8               [12] 2265 	mov	r0,a
      0008D7 A3               [24] 2266 	inc	dptr
      0008D8 E0               [24] 2267 	movx	a,@dptr
      0008D9 F9               [12] 2268 	mov	r1,a
      0008DA A3               [24] 2269 	inc	dptr
      0008DB E0               [24] 2270 	movx	a,@dptr
      0008DC FA               [12] 2271 	mov	r2,a
      0008DD A3               [24] 2272 	inc	dptr
      0008DE E0               [24] 2273 	movx	a,@dptr
      0008DF FB               [12] 2274 	mov	r3,a
      0008E0 EC               [12] 2275 	mov	a,r4
      0008E1 C3               [12] 2276 	clr	c
      0008E2 98               [12] 2277 	subb	a,r0
      0008E3 FC               [12] 2278 	mov	r4,a
      0008E4 ED               [12] 2279 	mov	a,r5
      0008E5 99               [12] 2280 	subb	a,r1
      0008E6 FD               [12] 2281 	mov	r5,a
      0008E7 EE               [12] 2282 	mov	a,r6
      0008E8 9A               [12] 2283 	subb	a,r2
      0008E9 FE               [12] 2284 	mov	r6,a
      0008EA EF               [12] 2285 	mov	a,r7
      0008EB 9B               [12] 2286 	subb	a,r3
      0008EC FF               [12] 2287 	mov	r7,a
      0008ED C3               [12] 2288 	clr	c
      0008EE 74 FF            [12] 2289 	mov	a,#0xff
      0008F0 9C               [12] 2290 	subb	a,r4
      0008F1 74 08            [12] 2291 	mov	a,#0x08
      0008F3 9D               [12] 2292 	subb	a,r5
      0008F4 74 3D            [12] 2293 	mov	a,#0x3d
      0008F6 9E               [12] 2294 	subb	a,r6
      0008F7 E4               [12] 2295 	clr	a
      0008F8 9F               [12] 2296 	subb	a,r7
      0008F9 50 06            [24] 2297 	jnc	00102$
      0008FB                       2298 00101$:
                                   2299 ;	board/zbs_segmented_uk/../sem9010.c:384: display_is_drawing = 0;
                                   2300 ;	assignBit
      0008FB C2*00            [12] 2301 	clr	_display_is_drawing
                                   2302 ;	board/zbs_segmented_uk/../sem9010.c:385: return 0;
      0008FD 75 82 00         [24] 2303 	mov	dpl,#0x00
      000900 22               [24] 2304 	ret
      000901                       2305 00102$:
                                   2306 ;	board/zbs_segmented_uk/../sem9010.c:387: return 1;
      000901 75 82 01         [24] 2307 	mov	dpl,#0x01
      000904 22               [24] 2308 	ret
      000905                       2309 00105$:
                                   2310 ;	board/zbs_segmented_uk/../sem9010.c:389: return 0;
      000905 75 82 00         [24] 2311 	mov	dpl,#0x00
                                   2312 ;	board/zbs_segmented_uk/../sem9010.c:390: }
      000908 22               [24] 2313 	ret
                                   2314 	.area CSEG    (CODE)
                                   2315 	.area CONST   (CODE)
      000000                       2316 _charDecode_numbers_65536_61:
      000000 F6                    2317 	.db #0xf6	; 246
      000001 C0                    2318 	.db #0xc0	; 192
      000002 6E                    2319 	.db #0x6e	; 110	'n'
      000003 EA                    2320 	.db #0xea	; 234
      000004 D8                    2321 	.db #0xd8	; 216
      000005 BA                    2322 	.db #0xba	; 186
      000006 BE                    2323 	.db #0xbe	; 190
      000007 E0                    2324 	.db #0xe0	; 224
      000008 FE                    2325 	.db #0xfe	; 254
      000009 FA                    2326 	.db #0xfa	; 250
      00000A                       2327 _charDecode_lowercase_65536_61:
      00000A FC                    2328 	.db #0xfc	; 252
      00000B 9E                    2329 	.db #0x9e	; 158
      00000C 0E                    2330 	.db #0x0e	; 14
      00000D CE                    2331 	.db #0xce	; 206
      00000E 3E                    2332 	.db #0x3e	; 62
      00000F 3C                    2333 	.db #0x3c	; 60
      000010 FA                    2334 	.db #0xfa	; 250
      000011 9C                    2335 	.db #0x9c	; 156
      000012 80                    2336 	.db #0x80	; 128
      000013 C2                    2337 	.db #0xc2	; 194
      000014 1C                    2338 	.db #0x1c	; 28
      000015 06                    2339 	.db #0x06	; 6
      000016 AC                    2340 	.db #0xac	; 172
      000017 8C                    2341 	.db #0x8c	; 140
      000018 8E                    2342 	.db #0x8e	; 142
      000019 7C                    2343 	.db #0x7c	; 124
      00001A F8                    2344 	.db #0xf8	; 248
      00001B 0C                    2345 	.db #0x0c	; 12
      00001C BA                    2346 	.db #0xba	; 186
      00001D 1E                    2347 	.db #0x1e	; 30
      00001E 86                    2348 	.db #0x86	; 134
      00001F 96                    2349 	.db #0x96	; 150
      000020 5A                    2350 	.db #0x5a	; 90	'Z'
      000021 88                    2351 	.db #0x88	; 136
      000022 DA                    2352 	.db #0xda	; 218
      000023 6E                    2353 	.db #0x6e	; 110	'n'
      000024                       2354 _charDecode_uppercase_65536_61:
      000024 FC                    2355 	.db #0xfc	; 252
      000025 9E                    2356 	.db #0x9e	; 158
      000026 36                    2357 	.db #0x36	; 54	'6'
      000027 CE                    2358 	.db #0xce	; 206
      000028 3E                    2359 	.db #0x3e	; 62
      000029 3C                    2360 	.db #0x3c	; 60
      00002A B6                    2361 	.db #0xb6	; 182
      00002B DC                    2362 	.db #0xdc	; 220
      00002C C0                    2363 	.db #0xc0	; 192
      00002D C2                    2364 	.db #0xc2	; 194
      00002E 1C                    2365 	.db #0x1c	; 28
      00002F 16                    2366 	.db #0x16	; 22
      000030 AC                    2367 	.db #0xac	; 172
      000031 F4                    2368 	.db #0xf4	; 244
      000032 F6                    2369 	.db #0xf6	; 246
      000033 7C                    2370 	.db #0x7c	; 124
      000034 F8                    2371 	.db #0xf8	; 248
      000035 0C                    2372 	.db #0x0c	; 12
      000036 BA                    2373 	.db #0xba	; 186
      000037 1E                    2374 	.db #0x1e	; 30
      000038 D6                    2375 	.db #0xd6	; 214
      000039 96                    2376 	.db #0x96	; 150
      00003A 5A                    2377 	.db #0x5a	; 90	'Z'
      00003B 88                    2378 	.db #0x88	; 136
      00003C DA                    2379 	.db #0xda	; 218
      00003D 6E                    2380 	.db #0x6e	; 110	'n'
                                   2381 	.area XINIT   (CODE)
      000000                       2382 __xinit__screen_start_time:
      000000 00 00 00 00           2383 	.byte #0x00, #0x00, #0x00, #0x00	; 0
      000004                       2384 __xinit__curEpdSegmentData:
      000004 00                    2385 	.db #0x00	; 0
      000005 00                    2386 	.db 0x00
      000006 00                    2387 	.db 0x00
      000007 00                    2388 	.db 0x00
      000008 00                    2389 	.db 0x00
      000009 00                    2390 	.db 0x00
      00000A 00                    2391 	.db 0x00
      00000B 00                    2392 	.db 0x00
      00000C 00                    2393 	.db 0x00
      00000D 00                    2394 	.db 0x00
      00000E 00                    2395 	.db 0x00
      00000F 00                    2396 	.db 0x00
      000010                       2397 __xinit__epdSegmentData:
      000010 00                    2398 	.db #0x00	; 0
      000011 00                    2399 	.db 0x00
      000012 00                    2400 	.db 0x00
      000013 00                    2401 	.db 0x00
      000014 00                    2402 	.db 0x00
      000015 00                    2403 	.db 0x00
      000016 00                    2404 	.db 0x00
      000017 00                    2405 	.db 0x00
      000018 00                    2406 	.db 0x00
      000019 00                    2407 	.db 0x00
      00001A 00                    2408 	.db 0x00
      00001B 00                    2409 	.db 0x00
      00001C                       2410 __xinit__position:
      00001C 00                    2411 	.db #0x00	; 0
                                   2412 	.area CABS    (ABS,CODE)
